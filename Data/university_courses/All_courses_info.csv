school,code,name,description,skills
NUS,CS1010,Programming Methodology,"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing. Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.","['computational', 'thinking', 'computational', 'problem', 'solving', 'designing', 'specifying', 'algorithm', 'basic', 'problem', 'formulation', 'problem', 'solving', 'approach', 'program', 'development', 'coding', 'testing', 'debugging', 'fundamental', 'programming', 'construct', 'fundamental', 'data', 'structure', 'basic', 'sorting', 'recursion']"
NUS,DSA1101,Introduction to Data Science,"The abundance of data being harvested from various sectors of today’s society increases the demand for skilled data science practitioners. This module introduces foundational data science concepts to prepare students for tackling real-world data analytic challenges. Major topics include basic concepts in probability and statistics, data manipulation, supervised and unsupervised learning, model validation and big data analysis, alongside special topics discussed in guest lectures delivered by practicing data scientists from government and industry. Throughout the course, students will learn fundamental R programming skills to implement and apply the data science methods in motivating realworld case studies from diverse fields.","['probability', 'statistic', 'data', 'manipulation', 'supervised', 'unsupervised', 'learning', 'model', 'validation', 'big', 'data', 'analysis', 'r', 'programming']"
NUS,MA2001,Linear Algebra I,"This module is a first course in linear algebra. Fundamental concepts of linear algebra will be introduced and investigated in the context of the Euclidean spaces R^n. Proofs of results will be presented in the concrete setting. Students are expected to acquire computational facilities and geometric intuition with regard to vectors and matrices. Some applications will be presented. Major topics Systems of linear equations, matrices, determinants, Euclidean spaces, linear combinations and linear span, subspaces, linear independence, bases and dimension, rank of a matrix, inner products, eigenvalues and eigenvectors, diagonalization, linear transformations between Euclidean spaces, applications.","['linear', 'algebra', 'linear', 'algebra', 'system', 'linear', 'equation', 'matrix', 'determinant', 'euclidean', 'space', 'linear', 'combination', 'linear', 'span', 'subspace', 'linear', 'independence', 'base', 'dimension', 'rank', 'matrix', 'inner', 'product', 'eigenvalue', 'eigenvectors', 'diagonalization', 'linear', 'transformation', 'euclidean', 'space']"
NUS,MA2002,Calculus,"This is a course in single-variable calculus. We will introduce precise definitions of limit, continuity, derivative, and the Riemann integral. Students will be exposed to computational techniques and applications of differentiation and integration. This course concludes with an introduction to first order differential equations. Major topics Functions; limit and continuity; derivative; Intermediate Value Theorem; chain rule; implicit differentiation; higher derivatives; Mean Value Theorem; Riemann integral; Fundamental Theorem of Calculus; elementary transcendental functions and their inverses; techniques of integration; computation of area, volume and arc length using definite integrals; first order differential equations.","['limit', 'continuity', 'derivative', 'differentiation', 'first', 'order', 'differential', 'equation', 'limit', 'continuity', 'derivative', 'intermediate', 'value', 'theorem', 'chain', 'rule', 'implicit', 'differentiation', 'derivative', 'mean', 'value', 'theorem', 'riemann', 'integral', 'fundamental', 'theorem', 'calculus', 'transcendental', 'function', 'integration', 'computation', 'area', 'volume', 'definite', 'integral', 'first', 'order', 'differential', 'equation']"
NUS,CS2040,Data Structures and Algorithms,"This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, and basic analysis of algorithms.","['data', 'structure', 'algorithm', 'data', 'structure', 'stack', 'searching', 'sorting', 'algorithm', 'analysis', 'algorithm']"
NUS,DSA2101,Essential Data Analytics Tools: Data Visualisation,"Data visualisation is an essential tool for data analytics. This module is an introduction to data cleaning, exploration, analysis and visualisation. Students will learn how to take raw data, extract meaningful information, use statistical tools, and make visualisations. Topics include: programming in R, introduction to data storage systems, data manipulation, exploratory data analysis, dimension reduction, statistical graphics for univariate, multivariate (high-dimensional), temporal and spatial data, basic design principles and critical evaluation of visual displays of data.","['data', 'visualisation', 'data', 'cleaning', 'exploration', 'analysis', 'visualisation', 'programming', 'r', 'data', 'storage', 'system', 'data', 'manipulation', 'exploratory', 'data', 'analysis', 'dimension', 'reduction', 'statistical', 'graphic', 'design', 'principle', 'critical', 'evaluation', 'visual', 'display', 'data']"
NUS,DSA2102,Essential Data Analytics Tools: Numerical Computation,"This module aims at introducing basic concepts and wellestablished numerical methods that are very related to the computing foundation of data science and analytics. The emphasis is on the tight integration of numerical algorithms, implementation in industrial programming language, and examination on practical examples drawn from various disciplines related to data science. Major topics include: computer arithmetic, matrix multiplication, numerical methods for solving linear systems, least squares method, interpolation, concrete implementations in industrial program language, and sample applications related to data science.","['numerical', 'algorithm', 'implementation', 'industrial', 'programming', 'language', 'examination', 'computer', 'arithmetic', 'matrix', 'multiplication', 'numerical', 'method', 'solving', 'linear', 'system', 'least', 'square', 'method', 'interpolation', 'program', 'language', 'sample', 'application']"
NUS,MA2311,Techniques in Advanced Calculus,"This module applies advanced calculus to practical mathematical problems, and is for students with advanced calculus background and with interest in the applications of calculus. Major topics Sequences, series, power series. Vector algebra in R2 and R3. Scalar- and vector-valued functions of several variables. Partial derivatives, total differentials. Mean value Theorem. Taylor's formula. Jacobian. Chain rule. Lagrange multiplier. Multiple integrals.","['calculus', 'sequence', 'series', 'power', 'series', 'vector', 'algebra', 'scalar', 'vector', 'valued', 'function', 'partial', 'derivative', 'total', 'differential', 'mean', 'value', 'theorem', 'taylor', ""'s"", 'formula', 'jacobian', 'chain', 'rule', 'lagrange', 'multiplier', 'multiple', 'integral']"
NUS,MA2104,Multivariable Calculus,"This is a module on the calculus of functions of several real variables, applications of which abound in mathematics, the physical sciences and engineering. The aim is for students to acquire computational skills, ability for 2- and 3-D visualisation and to understand conceptually fundamental results such as Green’s Theorem, Stokes’ Theorem and the Divergence Theorem. Major topics Euclidean distance and elementary topological concepts in Rn, limit and continuity, implicit functions. Partial differentiation, differentiable functions, differentials, chain rules, directional derivatives, gradients, mean value theorem, Taylor’s formula, extreme value theorem, Lagrange multipliers. Multiple integrals and iterated integrals, change of order of integration, applications, Jacobian matrix, change of variables in multiple integrals. Line integrals and Green’s theorem. Surface integrals, Stokes’ Theorem, Divergence Theorem.","['calculus', 'mathematics', 'physical', 'science', 'engineering', 'computational', 'skill', 'visualisation', 'green', 'theorem', 'stokes', 'theorem', 'divergence', 'theorem', 'euclidean', 'distance', 'topological', 'concept', 'limit', 'continuity', 'implicit', 'function', 'partial', 'differentiation', 'differentiable', 'function', 'differential', 'chain', 'rule', 'directional', 'derivative', 'gradient', 'mean', 'value', 'theorem', 'taylor', 'formula', 'extreme', 'value', 'theorem', 'lagrange', 'multiplier', 'multiple', 'integral', 'iterated', 'integral', 'change', 'order', 'integration', 'application', 'jacobian', 'matrix', 'change', 'variable', 'multiple', 'integral', 'line', 'integral', 'green', 'theorem', 'surface', 'integral', 'stokes', 'theorem', 'divergence', 'theorem']"
NUS,ST2131,Probability,"This module gives an elementary introduction to probability theory for students with knowledge of elementary calculus. It will cover not only the mathematics of probability theory but will work through diverse examples to illustrate the wide scope of applicability of probability, such as in engineering and computing, social and management sciences. Topics covered are counting methods, sample space and events, axioms of probability, conditional probability, independence, random variables, discrete and continuous distributions, joint and marginal distributions, conditional distribution, independence of random variables, expectation, conditional expectation, moment generating function, central limit theorem, and weak law of large numbers.","['probability', 'theory', 'calculus', 'probability', 'theory', 'counting', 'method', 'sample', 'space', 'event', 'axiom', 'probability', 'conditional', 'probability', 'independence', 'random', 'variable', 'discrete', 'continuous', 'distribution', 'joint', 'marginal', 'distribution', 'conditional', 'distribution', 'independence', 'random', 'variable', 'expectation', 'conditional', 'expectation', 'moment', 'generating', 'function', 'central', 'limit', 'theorem', 'weak', 'law', 'large', 'number']"
NUS,ST2132,Mathematical Statistics,"This module introduces students to the theoretical underpinnings of statistical methodology and concentrates on inferential procedures within the framework of parametric models. Topic include: random sample and statistics, method of moments, maximum likelihood estimate, Fisher information, sufficiency and completeness, consistency and unbiasedness, sampling distributions, x2-, t- and Fdistributions, confidence intervals, exact and asymptotic pivotal method, concepts of hypothesis testing, likelihood ratio test, Neyman-Pearson lemma. This module is targeted at students who are interested in Statistic and are able to meet the prerequisite.","['statistical', 'methodology', 'inferential', 'procedure', 'parametric', 'model', 'random', 'sample', 'statistic', 'method', 'moment', 'maximum', 'likelihood', 'estimate', 'fisher', 'information', 'sufficiency', 'completeness', 'consistency', 'unbiasedness', 'sampling', 'distribution', 'x', 'confidence', 'interval', 'exact', 'asymptotic', 'pivotal', 'method', 'hypothesis', 'testing', 'likelihood', 'ratio', 'test', 'neyman', 'pearson', 'lemma', 'statistic']"
NUS,CS3244,Machine Learning,"This module introduces basic concepts and algorithms in machine learning and neural networks. The main reason for studying computational learning is to make better use of powerful computers to learn knowledge (or regularities) from the raw data. The ultimate objective is to build self-learning systems to relieve human from some of already-too-many programming tasks. At the end of the course, students are expected to be familiar with the theories and paradigms of computational learning, and capable of implementing basic learning systems.","['machine', 'learning', 'neural', 'network', 'computational', 'learning', 'self', 'learning', 'system', 'computational', 'learning', 'learning', 'system']"
NUS,DSA3101,Data Science in Practice,"This module is designed to be a continuation of DSA1101 Introduction to Data Science. It focuses on data science methodology and the ability to apply such methodology to practical applications. Real-world problems will be provided by both industrial and academic partners in domains such as transportation, consulting, finance, pharmaceutics, life sciences and physics.",[]
NUS,DSA3102,Essential Data Analytics Tools: Convex Optimisation,Convex optimisation is an indispensable technique in dealing with high-dimensional structured problems in data science. The module covers modelling examples; basic concepts for convex functions and sub-gradients; gradient and sub-gradient methods; accelerated proximal gradient methods; stochastic block coordinate descent methods; Lagrangian duals; splitting algorithms and implementations.,"['convex', 'optimisation', 'high', 'dimensional', 'structured', 'convex', 'function', 'sub', 'gradient', 'gradient', 'sub', 'gradient', 'method', 'stochastic', 'block', 'coordinate', 'descent', 'method', 'lagrangian', 'duals', 'splitting', 'algorithm', 'implementation']"
NUS,ST3131,Regression Analysis,"This module focuses on data analysis using multiple regression models. Topics include simple linear regression, multiple regression, model building and regression diagnostics. One and two factor analysis of variance, analysis of covariance, linear model as special case of generalized linear model. This module is targeted at students who are interested in Statistics and are able to meet the pre-requisites.","['data', 'analysis', 'multiple', 'regression', 'model', 'simple', 'linear', 'regression', 'multiple', 'regression', 'model', 'building', 'regression', 'diagnostics', 'variance', 'analysis', 'covariance', 'linear', 'model', 'generalized', 'linear', 'model', 'statistic']"
NUS,DSA4199,Honours Project in Data Science and Analytics,"The objectives of the module are to develop skills for independent data-driven research and to promote the application of novel problem-solving strategies in data science. On completion of the module, students should be able to demonstrate an appreciation of the current state of knowledge in a particular field of research, to master the techniques required for the study of a research question, and to communicate research findings clearly and concisely in written and spoken English.","['communicate', 'research', 'finding']"
NUS,DSA4299,Applied Project in Data Science and Analytics,"For Bachelor of Science (Honours) students to participate full-time in a six-month-long project in an applied context that culminates in a project presentation and report.
",[]
NUS,DSA4211,High-Dimensional Statistical Analysis,"Dimensionality is an issue that can arise in many scientific fields such as medicine, genetics, business and finance, among others. The statistical properties of estimation and inference procedures must be carefully established when the number of variables is much larger than the number of observations. This module will discuss several statistical methodologies useful for exploring voluminous data. They include principal component analysis, clustering and classification, tree-structured analysis, neural network, hidden Markov models, sliced inverse regression, multiple testing, sure independent screening (SIS) and penalized estimation for variable selection. Real data will be used for illustration of these methods. Some fundamental theory for high-dimensional learning will be covered.","['estimation', 'inference', 'procedure', 'principal', 'component', 'analysis', 'clustering', 'classification', 'tree', 'structured', 'analysis', 'neural', 'network', 'hidden', 'markov', 'model', 'sliced', 'inverse', 'regression', 'multiple', 'testing', 'sure', 'independent', 'screening', 'si', 'penalized', 'estimation', 'variable', 'selection', 'theory', 'high', 'dimensional', 'learning']"
NUS,DSA4212,Optimisation for Large-Scale Data-Driven Inference,"Computational optimisation is ubiquitous in statistical learning and machine learning. The module covers several current and advanced topics in optimisation, with an emphasis on efficient algorithms for solving large scale data-driven inference problems. Topics include first and second order methods, stochastic gradient type approaches and duality principles. Many relevant examples in statistical learning and machine learning will be covered in detail. The algorithms will be implemented using the Python programming language.","['computational', 'optimisation', 'statistical', 'learning', 'machine', 'learning', 'optimisation', 'first', 'second', 'order', 'method', 'stochastic', 'gradient', 'type', 'approach', 'duality', 'principle', 'statistical', 'learning', 'machine', 'learning', 'python']"
NUS,DSA4262,Sense-making Case Analysis: Health and Medicine,"The practice of data science involves sense-making, the ability to formulate problems or hypotheses in real-world situations. Only when algorithms and technology are applied to meaningful problems or hypotheses can useful information be extracted from data for making decisions. This module is conducted as a series of hackathons: data scientists from partnering organisations in the health and medicine sector provide the real-world situations and data which will enable students to gain practical experience in (i) formulating problems, (ii) solving them by applying, or developing and implementing, appropriate data-analytic tools and techniques, and (iii) communicating findings and insights gained clearly.","['formulating', 'problem', 'data', 'analytic', 'tool', 'technique', 'communicating', 'finding', 'insight']"
NUS,DSA4263,Sense-making Case Analysis: Business and Commerce,"The practice of data science involves sense-making, the ability to formulate problems or hypotheses in real-world situations. Only when algorithms and technology are applied to meaningful problems or hypotheses can useful information be extracted from data for making decisions. This module is conducted as a series of hackathons data scientists from partnering organisations in the business and commerce sector provide the real-world situations and data which will enable students to gain practical experience in (i) formulating problems, (ii) solving them by applying, or developing and implementing, appropriate data-analytic tools and techniques, and (iii) communicating findings and insights gained clearly.","['formulating', 'problem', 'data', 'analytic', 'tool', 'technique', 'communicating', 'finding', 'insight']"
NUS,DSA4266,Sense-making Case Analysis: Science and Technology,"The practice of data science involves sense-making, the ability to formulate problems or hypotheses in real-world situations. Only when algorithms and technology are applied to meaningful problems or hypotheses can useful information be extracted from data for making decisions. This module is conducted as a series of hackathons: data scientists from partnering organisations in the science and technology sector provide the real-world situations and data which will enable students to gain practical experience in (i) formulating problems, (ii) solving them by applying, or developing and implementing, appropriate data-analytic tools and techniques, and (iii) communicating findings and insights gained clearly.","['formulating', 'problem', 'data', 'analytic', 'tool', 'technique', 'communicating', 'finding', 'insight']"
NUS,MA3236,Non-Linear Programming,"Optimization principles are of undisputed importance in modern design and system operation. The objective of this course is to present these principles and illustrate how algorithms can be designed from the mathematical theories for solving optimization problems. Major topics: Fundamentals, unconstrained optimization: one-dimensional search, Newton-Raphson method, gradient method, constrained optimization: Lagrangian multipliers method, Karush-Kuhn-Tucker optimality conditions, Lagrangian duality and saddle point optimality conditions, convex programming: Frank-Wolfe method.","['optimization', 'principle', 'importance', 'system', 'operation', 'optimization', 'problem', 'unconstrained', 'optimization', 'newton', 'raphson', 'method', 'gradient', 'method', 'constrained', 'optimization', 'lagrangian', 'multiplier', 'method', 'karush', 'kuhn', 'tucker', 'optimality', 'condition', 'lagrangian', 'duality', 'saddle', 'point', 'optimality', 'condition', 'convex', 'programming', 'frank', 'wolfe', 'method']"
NUS,MA3252,Linear and Network Optimisation,"The objective of this course is to work on optimization problems which can be formulated as linear and network optimization problems. We formulate linear programming (LP) problems and solve them by the simplex method (algorithm). We also look at the geometrical aspect and develop the mathematical theory of the simplex method. We further study problems which may be formulated using graphs and networks. These optimization problems can be solved by using linear or integer programming approaches. However, due to its graphical structure, it is easier to handle these problems by using network algorithmic approaches. Applications of LP and network optimization will be demonstrated. This course should help the student in developing confidence in solving many similar problems in daily life that require much computing. Major topics: Introduction to LP: solving 2-variable LP via graphical methods. Geometry of LP: polyhedron, extreme points, existence of optimal solution at extreme point. Development of simplex method: basic solution, reduced costs and optimality condition, iterative steps in a simplex method, 2-phase method and Big-M method. Duality: dual LP, duality theory, dual simplex method. Sensitivity Analysis. Network optimization problems: minimal spanning tree problems, shortest path problems, maximal flow problems, minimum cost flow problems, salesman problems and postman problems.","['optimization', 'problem', 'linear', 'network', 'optimization', 'linear', 'programming', 'lp', 'simplex', 'method', 'simplex', 'method', 'graph', 'network', 'linear', 'integer', 'programming', 'network', 'algorithmic', 'approach', 'lp', 'network', 'optimization', 'lp', 'variable', 'lp', 'via', 'graphical', 'method', 'geometry', 'lp', 'polyhedron', 'extreme', 'point', 'existence', 'optimal', 'solution', 'extreme', 'point', 'simplex', 'method', 'basic', 'solution', 'reduced', 'cost', 'optimality', 'condition', 'iterative', 'step', 'simplex', 'method', 'phase', 'method', 'big', 'method', 'duality', 'dual', 'lp', 'duality', 'theory', 'dual', 'simplex', 'method', 'sensitivity', 'analysis', 'network', 'optimization', 'minimal', 'spanning', 'tree', 'shortest', 'path', 'maximal', 'flow', 'minimum', 'cost', 'flow', 'salesman', 'problem', 'postman', 'problem']"
NUS,MA4270,Data Modelling and Computation,"This course aims at presenting important mathematical concepts and computational methods that are often used for modelling and analysis of big data sets and complex networks. The emphasis is on mathematical modelling and computational methods for practical problems in data science. Major topics include: basics on convex analysis, numerical methods for large-scale convex problems, dimensionality reduction, numerical methods for machine learning, kernel methods for pattern analysis, sparse coding and dictionary learning.","['mathematical', 'modelling', 'computational', 'method', 'convex', 'analysis', 'numerical', 'method', 'large', 'scale', 'convex', 'problem', 'dimensionality', 'reduction', 'numerical', 'method', 'machine', 'learning', 'kernel', 'method', 'pattern', 'analysis', 'sparse', 'coding', 'dictionary', 'learning']"
NUS,ST3232,Design & Analysis of Experiments,"This module covers common designs of experiments and their analysis. Topics include basic experimental designs, analysis of one-way and two way layout data, multiple comparisons, factorial designs, 2k-factorial designs, blocking and confounding, fractional factorial design and nested designs. This module is targeted at students who are interested in Statistics and are able to meet the pre-requisites.","['experimental', 'design', 'analysis', 'one', 'way', 'two', 'way', 'layout', 'data', 'multiple', 'comparison', 'factorial', 'design', 'k', 'factorial', 'design', 'blocking', 'confounding', 'fractional', 'factorial', 'design', 'nested', 'design', 'statistic']"
NUS,ST4253,Applied Time Series Analysis,"This module introduces the modelling and analysis of time series data. A computer package will be used to analyse real data sets. Topics include stationary time series, ARIMA models, estimation and forecasting with ARIMA models This module is targeted at students who are interested in Statistics and are able to meet the pre-requisites.","['time', 'series', 'data', 'stationary', 'time', 'series', 'arima', 'model', 'estimation', 'forecasting', 'arima', 'model', 'statistic']"
NUS,ST3239,Survey Methodology,"This module gives an introduction to the design of sample surveys and estimation procedures, with emphasis on practical applications in survey sampling. Topics include planning of surveys, questionnaire construction, methods of data collection, fieldwork procedures, sources of errors, basic ideas of sampling, simple random sampling, stratified, systematic, replicated, cluster and quota sampling, sample size determination and cost. This module is targeted at students who are interested in Statistics and are able to meet the pre-requisites.","['design', 'sample', 'survey', 'estimation', 'procedure', 'survey', 'sampling', 'planning', 'survey', 'questionnaire', 'construction', 'method', 'data', 'collection', 'procedure', 'source', 'error', 'basic', 'idea', 'sampling', 'simple', 'random', 'sampling', 'stratified', 'systematic', 'replicated', 'cluster', 'quota', 'sampling', 'sample', 'size', 'determination', 'cost', 'statistic']"
NUS,ST4250,Multivariate Statistical Analysis,"This module focuses on the classical theory and methods of multivariate statistical analysis. Topics include distribution theory multivariate normal distribution, Hotelling's T2 and Wishart distributions, inference on the mean and covariance, principal components and canonical correlation, factor analysis, discrimination and classification. This module is targeted at students who are interested in Statistics, are able to meet the pre-requisites and are matriculated in or after 2002.","['multivariate', 'statistical', 'analysis', 'distribution', 'theory', 'multivariate', 'normal', 'distribution', 'hotelling', ""'s"", 'wishart', 'distribution', 'inference', 'mean', 'covariance', 'principal', 'component', 'canonical', 'correlation', 'factor', 'analysis', 'discrimination', 'classification', 'statistic']"
NUS,ST3247,Simulation,"The advent of fast and inexpensive computational power has facilitated the description of real phenomenon using realistic stochastic models which can be analysed using simulation studies. This module teaches students how to analyse a model by use of a simulation study and the topics include pseudorandom number generation, generating discrete and continuous random variables, simulating discrete events, statistical analysis of simulated data, variance reduction, Markov Chain Monte Carlo methods. It also covers topics in stochastic optimisation such as simulated annealing. This module is targeted at students who are interested in Statistics and are able to meet the prerequisites.","['pseudorandom', 'number', 'generation', 'generating', 'discrete', 'continuous', 'random', 'variable', 'simulating', 'discrete', 'event', 'statistical', 'analysis', 'simulated', 'data', 'variance', 'reduction', 'markov', 'chain', 'monte', 'carlo', 'method', 'stochastic', 'optimisation', 'simulated', 'annealing', 'statistic']"
NUS,ST3248,Statistical Learning I,"Statistical learning is a large collection of computer-based modelling and prediction tools with applications in diverse fields including business, medicine, astrophysics, and public policy. This series of two modules covers many of the popular approaches for a variety of statistical problems. There is heavy emphasis on the implementation of these methods on real-world data sets in the popular statistical software package R. Part I gives a broad overview of the common problems as well as their most popular approaches. Topics include linear regression model and its extensions, classification methods, resampling methods, regularisation and model selection, principal components and clustering methods.","['statistical', 'learning', 'statistical', 'software', 'package', 'r', 'linear', 'regression', 'model', 'classification', 'method', 'resampling', 'method', 'regularisation', 'model', 'selection', 'principal', 'component', 'clustering', 'method']"
NUS,ST4231,Computer Intensive Statistical Methods,"The availability of high-speed computation has led to the development of “modern” statistical methods which are implemented in the form of well-understood computer algorithms. This module introduces students to several computer intensive statistical methods and the topics include empirical distribution and plug-in principle, general algorithm of bootstrap method, bootstrap estimates of standard deviation and bias, jack-knife method, bootstrap confidence intervals, the empirical likelihood for the mean and parameters defined by simple estimating function, Wilks theorem, and EL confidence intervals, missing data, EM algorithm, Markov Chain Monte Carlo methods. This module is targeted at students who are interested in Statistics and are able to meet the prerequisite.","['empirical', 'distribution', 'plug', 'principle', 'bootstrap', 'method', 'bootstrap', 'estimate', 'standard', 'deviation', 'bias', 'jack', 'knife', 'method', 'bootstrap', 'confidence', 'interval', 'empirical', 'likelihood', 'theorem', 'el', 'confidence', 'interval', 'missing', 'data', 'em', 'algorithm', 'markov', 'chain', 'monte', 'carlo', 'method', 'statistic']"
NUS,ST4234,Bayesian Statistics,"Bayesian principles: Bayes' theorem, estimation, hypothesis testing, prior distributions, likelihood, predictive distributions. Bayesian computation: numerical approximation, posterior simulation and integration, Markov chain simulation, models and applications: hierarchical linear models, generalized linear models, multivariate models, mixture models, models for missing data, case studies. This module is targeted at students who are interested in Statistics and are able to meet the pre-requisites.","['bayesian', 'principle', 'bayes', ""'"", 'theorem', 'estimation', 'hypothesis', 'testing', 'prior', 'distribution', 'likelihood', 'predictive', 'distribution', 'bayesian', 'computation', 'numerical', 'approximation', 'posterior', 'simulation', 'integration', 'markov', 'chain', 'simulation', 'hierarchical', 'linear', 'model', 'generalized', 'linear', 'model', 'multivariate', 'model', 'mixture', 'model', 'missing', 'data', 'statistic']"
NUS,ST4248,Statistical Learning II,"Statistical Learning is a large collection of computer-based modelling and prediction tools with applications in diverse fields including business, medicine, astrophysics, and public policy. This series of two modules covers many of the popular approaches for a variety of statistical problems. There is heavy emphasis on the implementation of these methods on real-world data sets in the popular statistical software package R. Part II builds on the knowledge in Part I, introducing more tools as well as generalising and extending some of the tools covered in Part I using entirely different approaches. Topics include non-parametric smoothing methods, tree-based methods, support vector machines, neural networks and ensemble learning.","['statistical', 'learning', 'statistical', 'software', 'package', 'r', 'non', 'parametric', 'smoothing', 'method', 'tree', 'based', 'method', 'support', 'vector', 'machine', 'neural', 'network', 'ensemble', 'learning']"
NUS,CS3210,Parallel Computing,"The aim of this module is to provide an introduction to the field of parallel computing with hands-on parallel programming experience on real parallel machines. The module is divided into four parts parallel computation models and parallelism, parallel architectures, parallel algorithm design and programming, and new parallel computing models. Topics includes theory of parallelism and models; shared-memory architectures; distributed-memory architectures; data parallel architectures; interconnection networks, topologies and basic of communication operations; principles of parallel algorithm design; performance and scalability of parallel programs, overview of new parallel computing models such as grid, cloud, GPGPU.","['parallel', 'computing', 'parallel', 'programming', 'parallel', 'machine', 'parallel', 'computation', 'model', 'parallelism', 'parallel', 'architecture', 'parallel', 'algorithm', 'design', 'programming', 'new', 'parallel', 'computing', 'model', 'theory', 'parallelism', 'model', 'shared', 'memory', 'architecture', 'distributed', 'memory', 'architecture', 'data', 'parallel', 'architecture', 'interconnection', 'network', 'topology', 'communication', 'operation', 'parallel', 'algorithm', 'design', 'performance', 'scalability', 'parallel', 'program', 'grid', 'cloud', 'gpgpu']"
NUS,CS3223,Database Systems Implementation,"This system-oriented module provides an in-depth study of the concepts and implementation issues related to database management systems. It first covers the physical implementation of the relational data model, which includes storage management, access methods, query processing, and optimisation. Then it covers issues and techniques dealing with multi-user application environments, namely, transactions, concurrency control, and recovery. The third part covers advanced topics such as on-line analytical processing, in-memory databases, and column stores.","['database', 'management', 'system', 'relational', 'data', 'model', 'storage', 'management', 'access', 'method', 'query', 'processing', 'optimisation', 'multi', 'user', 'application', 'environment', 'transaction', 'concurrency', 'control', 'recovery', 'line', 'analytical', 'processing', 'memory', 'database', 'column', 'store']"
NUS,CS3230,Design and Analysis of Algorithms,"This module introduces different techniques of designing and analysing algorithms. Students will learn about the framework for algorithm analysis, for example, lower bound arguments, average case analysis, and the theory of NP-completeness. In addition, students are exposed to various algorithm design paradigms. The module serves two purposes: to improve the students' ability to design algorithms in different areas, and to prepare students for the study of more advanced algorithms. The module covers lower and upper bounds, recurrences, basic algorithm paradigms (such as prune-and-search, dynamic programming, branch-and-bound, graph traversal, and randomised approaches), amortized analysis, NP-completeness, and some selected advanced topics.","['designing', 'analysing', 'algorithm', 'algorithm', 'analysis', 'lower', 'bound', 'argument', 'average', 'case', 'analysis', 'np', 'completeness', 'lower', 'upper', 'bound', 'recurrence', 'prune', 'search', 'dynamic', 'programming', 'branch', 'bound', 'graph', 'traversal', 'randomised', 'approach', 'amortized', 'analysis', 'np', 'completeness']"
NUS,CS3243,Introduction to Artificial Intelligence,"The module introduces the basic concepts in search and knowledge representation as well as to a number of sub-areas of artificial intelligence. It focuses on covering the essential concepts in AI. The module covers Turing test, blind search, iterative deepening, production systems, heuristic search, A* algorithm, minimax and alpha-beta procedures, predicate and first-order logic, resolution refutation, non-monotonic reasoning, assumption-based truth maintenance systems, inheritance hierarchies, the frame problem, certainly factors, Bayes' rule, frames and semantic nets, planning, learning, natural language, vision, and expert systems and LISP.","['search', 'artificial', 'intelligence', 'turing', 'test', 'blind', 'search', 'iterative', 'deepening', 'production', 'system', 'heuristic', 'search', 'algorithm', 'minimax', 'alpha', 'beta', 'procedure', 'predicate', 'first', 'order', 'logic', 'resolution', 'refutation', 'non', 'monotonic', 'reasoning', 'assumption', 'based', 'truth', 'maintenance', 'system', 'inheritance', 'hierarchy', 'certainly', 'factor', 'bayes', ""'"", 'rule', 'natural', 'language']"
NUS,CS4224,Distributed Databases,"This module studies the management of data in a distributed environment. It covers the fundamental principles of distributed data management and includes distribution design, data integration, distributed query processing and optimization, distributed transaction management, and replication. It will also look at how these techniques can be adapted to support database management in emerging technologies (e.g., parallel systems, peer-to-peer systems, cloud computing).","['distributed', 'environment', 'distributed', 'data', 'management', 'distribution', 'design', 'data', 'integration', 'distributed', 'query', 'processing', 'optimization', 'distributed', 'transaction', 'management', 'replication', 'database', 'management', 'parallel', 'system', 'peer', 'peer', 'system', 'cloud', 'computing']"
NUS,CS4225,Big Data Systems for Data Science,"Data science incorporates varying elements and builds on techniques and theories from many fields, including statistics, data engineering, data mining, visualization, data warehousing, and high-performance computing systems with the goal of extracting meaning from big data and creating data products. Data science utilizes advanced computing systems such as Apache Hadoop and Spark to address big data challenges. In this module, students will learn various computing systems and optimization techniques that are used in data science with emphasis on the system building and algorithmic optimizations of these techniques.","['statistic', 'data', 'engineering', 'data', 'mining', 'visualization', 'data', 'warehousing', 'high', 'performance', 'computing', 'system', 'apache', 'hadoop', 'spark', 'optimization', 'technique', 'system', 'building', 'algorithmic', 'optimization']"
NUS,CS4231,Parallel and Distributed Algorithms,"This course will examine some fundamental issues in parallel programming and distributed computing, and the relationships between the two. Parallel programming: mutual exclusion, semaphores, consistency, wait-free synchronization. Distributed computing: time, global state, snapshots, message ordering. Relationships: consensus, fault-tolerance, transactions, self-stabilization.","['parallel', 'programming', 'distributed', 'computing', 'parallel', 'programming', 'mutual', 'exclusion', 'consistency', 'wait', 'free', 'synchronization', 'distributed', 'computing', 'global', 'state', 'snapshot', 'message', 'ordering', 'consensus', 'fault', 'tolerance', 'transaction', 'self', 'stabilization']"
NUS,CS4234,Optimisation Algorithms,"This module covers common algorithmic techniques for solving optimisation problems, and introduces students to approaches for finding good-enough solutions to NP-hard problems. Topics covered include linear and integer programming, network flow algorithms, local search heuristics, approximation algorithms, and randomized algorithms. Through analysis and application of the techniques to a variety of canonical problems, students develop confidence to (i) appropriately model a given optimisation problem, (ii) apply appropriate algorithmic techniques to solve the problem, (iii) analyse the properties of the problem and candidate algorithms, such as time and space complexity, convergence, approximability, and optimality bound.","['optimisation', 'problem', 'np', 'hard', 'problem', 'linear', 'integer', 'programming', 'network', 'flow', 'algorithm', 'local', 'search', 'heuristic', 'approximation', 'algorithm', 'randomized', 'algorithm', 'candidate', 'algorithm', 'time', 'space', 'complexity', 'convergence', 'approximability', 'optimality', 'bound']"
NUS,CS4243,Computer Vision and Pattern Recognition,"This module is for undergraduates who are interested in computer vision and its applications. It covers (a) the basic skills needed in handling images and videos, (b) the basic theories needed to understand geometrical computer vision, and (c) pattern recognition. Topics covered in image handling include contrast stretch, histogram equalization, noise removal, and color space. Topics covered in geometrical vision include affine transform, vanishing points, camera projection models, homography, camera calibration, rotation representations including quaternions, epipolar geometry, binocular stereo, structure from motion. Topics covered for pattern recognition include principal component analysis.","['computer', 'vision', 'handling', 'image', 'video', 'geometrical', 'computer', 'vision', 'pattern', 'recognition', 'image', 'handling', 'contrast', 'stretch', 'histogram', 'equalization', 'noise', 'removal', 'color', 'space', 'geometrical', 'vision', 'affine', 'transform', 'vanishing', 'point', 'camera', 'projection', 'model', 'homography', 'camera', 'calibration', 'rotation', 'representation', 'quaternion', 'epipolar', 'geometry', 'binocular', 'stereo', 'structure', 'motion', 'principal', 'component', 'analysis']"
NUS,CS4248,Natural Language Processing,"This module deals with computer processing of human languages, including the use of neural networks and deep learning in natural language processing. The topics covered include: regular expressions, words and edit distance, n-grams, part-of-speech tagging, feed-forward neural networks, neural network training, word embedding, convolutional neural networks, recurrent neural networks, sequence-to-sequence models with attention, transformers, context-free grammars, syntactic parsing, semantics, and discourse.","['computer', 'processing', 'human', 'language', 'neural', 'network', 'deep', 'learning', 'natural', 'language', 'processing', 'regular', 'expression', 'word', 'edit', 'distance', 'gram', 'part', 'speech', 'tagging', 'feed', 'forward', 'neural', 'network', 'neural', 'network', 'word', 'embedding', 'convolutional', 'neural', 'network', 'recurrent', 'neural', 'network', 'sequence', 'sequence', 'model', 'attention', 'transformer', 'context', 'free', 'grammar', 'syntactic', 'parsing', 'semantics', 'discourse']"
NUS,CS5340 ,Uncertainty Modelling in AI,"The module covers modelling methods that are suitable for reasoning with uncertainty. The main focus will be on probabilistic models including Bayesian networks and Markov networks. Topics include representing conditional independence, building graphical models, inference using graphical models and learning from data. Selected applications in various domains such as speech, vision, natural language processing, medical informatics, bioinformatics, data mining and others will be discussed.","['probabilistic', 'model', 'bayesian', 'network', 'markov', 'network', 'conditional', 'independence', 'graphical', 'model', 'inference', 'using', 'graphical', 'model', 'natural', 'language', 'processing', 'medical', 'informatics', 'bioinformatics', 'data', 'mining']"
NUS,MA4230,Matrix Computation,"This course provides essential ideas and techniques as well as algorithms in numerical linear algebra that are needed in scientific computing and data analytics for effectively working with vectors and matrices. The major difficulties faced in solving problems in linear algebra numerically are discussed, as well as the associated applications often seen in practice. The emphasis is on the development of elegant and powerful algorithms and their applications for solving practical problems. Major topics include basic vector and matrix manipulation, the singular value decomposition, QR factorization, least squares problems, conditioning and stability, eigenvalue problems, and various applications in scientific computing and data science.","['numerical', 'linear', 'algebra', 'data', 'analytics', 'linear', 'algebra', 'basic', 'vector', 'matrix', 'manipulation', 'singular', 'value', 'decomposition', 'qr', 'factorization', 'least', 'square', 'problem', 'conditioning', 'stability', 'eigenvalue', 'problem']"
NTU,CZ1003,Introduction to Computational Thinking & Programming,"Computational thinking (CT) is the process of analysing a problem then designing and expressing its solution in such a way that a computer can effectively carry it out. It includes a number of characteristics, such as breaking a problem into small and repetitive ordered steps, logically ordering and analyzing data and creating solutions that can be effectively implemented as programs running on computer. The aim of this course is hence to take students with no prior experience of thinking in a computational manner to a point where you can derive simple algorithms and code the programs to solve some basic problems in your domain of studies. Student will also learn about basic program construct and simple data structures. In addition, the course will include topics to appreciate the internal operations of a processor. 1. Describe the internal operation of a basic processor, how a program is executed by a computer and computing trends. 2. Analyse a problem then design and express its solution in such a way that a computer can effectively carry it out. (i.e. equip you with CT skills) 3. Implement problem solutions as programs using basic control structures (sequence, conditional, iterative). 4. Implement problem solutions as programs using basic data types and aggregate data types. 5. Apply the CT concepts on case studies/problem‐based scenarios through hands‐on practice of the CT processes. 0
Course Overview and Concepts of Computational Thinking
Solving complex problem using computer ‐ enables the student to work out exactly what
to tell the computer to do.
1
Overview of Programming Languages and Basic Internal Operation of Computer
High level programming languages (Python, C, Java) Basic computer organization
(Processor, Memory, I/O) and how a computer execute a program (Machine instructions).
2
Basic Program Structure: Control Constructs and Data Types
Concepts of data types, variables; Pseudo‐code and flowcharts; Sequences, Selection
(if/else), iteration (for/while loop).
3
CT Concept ‐ Abstraction
Problem formulation ‐ reducing something to a very simple set of characteristics to only
focusing on the most relevant to the problem. Concept of functions/libraries and data
structure.
4
CT Concept ‐ Decomposition
Break a complex problem into smaller and more manageable parts/steps, such that each
of these smaller problems can then be looked at individually.
5
CT Concept – Pattern recognition
Looking for similarities among and within problems, which also enable re‐use knowledge
of previous similar problems.
6
CT Concept – Algorithm
Reformulating the problem into series of ordered steps through Identifying, analyzing, and
implementing possible solutions with the goal of achieving the most efficient and effective
combination of steps and resources. (Some common/useful examples: Sorting and
searching).
7
Basic Programming Constructs in C Language
C program structure. Syntax and semantics. Intrinsic data types, declarations, operators,
assignments, control flow, and simple input/output; Pre‐processing. Functions; Return
values, arguments and parameter passing; Scopes of variables; Concept of side effects.
8
Built in Data Structures
Pointers, pointer operations and pass by reference; One-dimensional and multi-
dimensional arrays, and pointers and arrays; Character strings and arrays of strings;
Structures, arrays of structures and type definitions.","['computational', 'thinking', 'process', 'analysing', 'problem', 'characteristic', 'breaking', 'problem', 'program', 'construct', 'internal', 'operation', 'conditional', 'data', 'type', 'computational', 'thinking', 'computer', 'programming', 'language', 'internal', 'operation', 'computer', 'high', 'level', 'programming', 'language', 'python', 'c', 'java', 'computer', 'organization', 'processor', 'memory', 'machine', 'instruction', 'control', 'construct', 'sequence', 'selection', 'iteration', 'loop', 'concept', 'abstraction', 'problem', 'formulation', 'function', 'library', 'decomposition', 'concept', 'pattern', 'recognition', 'looking', 'similarity', 'previous', 'similar', 'concept', 'algorithm', 'analyzing', 'effective', 'combination', 'step', 'resource', 'basic', 'programming', 'construct', 'language', 'c', 'program', 'structure', 'syntax', 'semantics', 'declaration', 'operator', 'simple', 'input', 'output', 'return', 'value', 'argument', 'parameter', 'passing', 'scope', 'variable', 'pointer', 'operation', 'dimensional', 'array', 'array', 'character', 'string', 'array', 'string', 'array', 'structure', 'type', 'definition']"
NTU,MH1805,Calculus I and II,"This course aims to equip you with the subject knowledge, logical reasoning and analytical skills so that you are able to apply the concepts and techniques of calculus of one variable to solve problems encountered in science. Independently process and interpret concepts and methodologies related to differentiation, integration, power series and ordinary differential equations, and apply them to problems occurring in science.
Critically assess the applicability of mathematical tools in the workplace.
Critically assess the validity of a mathematical argument involving concepts from the course content.
Present mathematical ideas logically and coherently at the appropriate level for the intended audience. Sets and functions

Limits and continuity, one-to-one and inverse functions

Differentiation and optimization

Definition of Riemann Integral, Fundamental Theorem of Calculus, applications of integration.

Methods of integration

Series, Power Series, Taylor Series

Elementary theory, and methods of Ordinary Differential Equations","['subject', 'knowledge', 'logical', 'reasoning', 'analytical', 'skill', 'calculus', 'independently', 'process', 'interpret', 'concept', 'differentiation', 'integration', 'power', 'series', 'ordinary', 'differential', 'equation', 'ass', 'validity', 'limit', 'continuity', 'differentiation', 'optimization', 'riemann', 'integral', 'fundamental', 'theorem', 'calculus', 'application', 'integration', 'integration', 'series', 'power', 'series', 'taylor', 'series', 'elementary', 'theory', 'method', 'ordinary', 'differential', 'equation']"
NTU,MH1812,Discrete Mathematics," This course serves as an introduction to various topics in discrete mathematics. Familiarity with formal analysis through simple problems in some basic discrete structures is a key objective rather than knowing these structures in deptn Specifically, the main aim is to learn topics from the following broad areas of discrete mathematics: number theory, logic, combinatorics, and graph theory. This course aims to provide students with a solid mathematical foundation and is intended for first year computer science and computer engineering students.Course Content Elementary Number Theory: Types of numbers, Euclidean division, modular arithmetic, operator closure. Propositional Logic: Propositions, logical operators, compound propositions, truth tables, equivalent statements, De Morgan's laws Propositional Logic: Logical equivalence laws, order of operations, arguments, inference rules. Predicate Logic: Predicates, quantification, negating quantifiers, determining truth values. Predicate Logic: Conditional quantification, inference rules. Proof Techniques: Direct proof, proof by induction  Identify which integers are congruent modulo a positive integer Formulate, interpret, and manipulate logical statements Identify valid and invalid arguments Prove elementary mathematical results using various proof techniques Apply basic tools for counting Solve linear recurrence relations Identify two equal sets and provide justification that these sets are equal Manipulate relations and functions between sets Apply basic techniques in graph theory  Elementary Number Theory: Types of numbers. Euclidean division, modular arithmetic, operator closure. Propositional Logic: Propositions, logical operators, compound propositions, truth tables. equivalent statements, De Morgan's laws Propositional Logic: Logical equivalence laws, order of operations, arguments, inference rules. Predicate Logic: Predicates, quantification, negating quantifiers, determining truth values. Predicate Logic: Conditional quantification, inference rules. Proof Techniques: Direct proof, proof by induction Proof Techniques: Proof by contradiction, proof by contrapositive. Combinatorics: Principle Of counting, Combinations, permutations. Linear Recurrence Relations: Solving by backtracking, solving by Characteristic equation. Set Theory: Sets, union, intersection, set difference, set equivalence, cardinality, power sets Set Theory: Cartesian products, double inclusion. Relations: Relations, relations on a set, reflexivity symmetry, antisymmetry, transitivity Relations: Equivalence relations. partial orders, matrix representation, composition, ternary relations. Functions: Functions, injectivity, surjectivity, bijectivity, inverse, composition Functions: Floor and ceiling, pigeonhole principle, countable sets, Cantor's diagonal argument. Graph Theory: Graphs. vertices, edges, subgraphs, multigraphs, directed graphs, Euler pathslcycles, Euler's theorem. Graph Theory: complete graphs, bipartite graphs, handshaking lemma, adjacency matrix, Hamilton cycles, graph isomorphism.","['discrete', 'mathematics', 'discrete', 'structure', 'discrete', 'mathematics', 'number', 'theory', 'logic', 'combinatorics', 'graph', 'theory', 'computer', 'science', 'computer', 'engineering', 'elementary', 'number', 'theory', 'euclidean', 'division', 'modular', 'arithmetic', 'operator', 'closure', 'proposition', 'logical', 'operator', 'compound', 'proposition', 'truth', 'table', 'equivalent', 'statement', 'de', 'morgan', ""'s"", 'law', 'logical', 'equivalence', 'law', 'order', 'operation', 'inference', 'rule', 'predicate', 'quantification', 'quantifier', 'determining', 'truth', 'value', 'conditional', 'quantification', 'direct', 'proof', 'proof', 'induction', 'interpret', 'logical', 'statement', 'identify', 'valid', 'invalid', 'argument', 'counting', 'solve', 'linear', 'recurrence', 'relation', 'identify', 'relation', 'graph', 'theory', 'elementary', 'number', 'theory', 'modular', 'arithmetic', 'operator', 'closure', 'proposition', 'logical', 'operator', 'compound', 'proposition', 'truth', 'table', 'equivalent', 'statement', 'de', 'morgan', ""'s"", 'law', 'logical', 'equivalence', 'law', 'order', 'operation', 'inference', 'rule', 'predicate', 'quantification', 'quantifier', 'determining', 'truth', 'value', 'conditional', 'quantification', 'direct', 'proof', 'proof', 'induction', 'proof', 'contradiction', 'proof', 'principle', 'counting', 'combination', 'linear', 'recurrence', 'relation', 'characteristic', 'equation', 'union', 'intersection', 'set', 'equivalence', 'cardinality', 'power', 'set', 'set', 'theory', 'cartesian', 'product', 'double', 'inclusion', 'relation', 'relation', 'relation', 'reflexivity', 'symmetry', 'transitivity', 'relation', 'equivalence', 'relation', 'partial', 'order', 'matrix', 'representation', 'composition', 'ternary', 'relation', 'function', 'injectivity', 'surjectivity', 'inverse', 'composition', 'function', 'pigeonhole', 'principle', 'cantor', ""'s"", 'diagonal', 'argument', 'graph', 'theory', 'multigraphs', 'directed', 'graph', 'euler', 'euler', ""'s"", 'theorem', 'graph', 'theory', 'bipartite', 'graph', 'lemma', 'adjacency', 'matrix', 'hamilton', 'cycle', 'graph', 'isomorphism']"
NTU,CC0001,Inquiry and Communication in an Interdisciplinary World,"Writing is a tool for thinking. Through the process of organising our thoughts into words, we often stumble upon ideas and figure out what we mean. At its best, this process yields new insights. One of the aims of this course is to give you this experience of discovering ideas through the process of writing. While you will have the opportunity to practise the genre conventions of your discipline later in your studies, this first common communication course is designed to help you form habits of thinking that will serve you across the university and even in the world outside the university. Taken by all first-year undergraduates, this foundational coursewill develop your written and oral communication skills, as well as your ability to read and analyse texts. It will help you to understand revision as integral to the process of composition, to convey your interpretations and ideas with confidence and clarity, and to consider audience and purpose when you communicate. 1. closely observe and analyse texts and phenomena;
2. design questions or puzzles from engagement with a text that can motivate further exploration;
3. summarise, paraphrase, and quote from sources accurately and ethically;
4. compose complex arguments that build on the ideas of published authors as well as their own analysis
and thinking;
5. express their ideas orally through both informal and formal presentations;
6. discover writing as a tool for thinking;
7. use peer and teacher feedback to revise their thinking and communication;
8. recognize audience and rhetorical situation as significant factors in communication In this course, students will be asked to explore a topic for their own research. The choices are: 1. a place in Singapore; 2. a community within Singapore; 3. their own writing practices. Students will investigate their chosen topic by close observation, recording their observations, and finding interesting patterns or puzzles in what they observe. In class, students will practice how to come to a question to which they do not have an answer, and, after a review of presentation skills, students will present their discoveries to the class. Eventually, students will be asked to find two sources that can help them compose an argument that responds to their question. The final goal is to draft an op-ed (short for “opposite the editorial page”), a piece of writing usually found in a newspaper or magazine that expresses the author’s argument on a current topic. Students’ op-eds will be peer workshopped and revised substantially over two to three weeks. Students will also consult with their teacher and receive individual feedback on their draft. By the end of the semester, students will consider how to send their op-ed to a newspaper or online platform.","['process', 'organising', 'thought', 'process', 'writing', 'genre', 'convention', 'discipline', 'later', 'study', 'communication', 'course', 'written', 'oral', 'communication', 'skill', 'process', 'composition', 'confidence', 'clarity', 'audience', 'purpose', 'source', 'accurately', 'analysis', 'communication', 'audience', 'rhetorical', 'situation', 'presentation', 'skill']"
NTU,CC0002,Navigating the Digital World,"With digitalisation now becoming the new normal in our daily life, this course seeks to equip students from different disciplines with problem‐solving techniques with the aid of computers and to enable them to acquire common but essential digital skills that are crucial in today’s workforce. In this course, students will learn how to apply the concept of computational thinking and quantitative reasoning to solve problems and analyse data. They will also learn how to identify online threats and understand the principles of ethics and intellectual property rights in the digital world. Students will also be exposed to current issues in the digital world, such as cybersecurity and the rise of fake news. In addition, students will also learn how to use some of the latest online tools for effective presentation, communication, and collaborative skills in teams during the course. 1. Apply structured approaches to solve complex problems by breaking them into sub‐problems. 2. Apply quantitative reasoning to analyse data, guide problem-solving, and support decision‐making. 3. Use digital tools and technologies to search for, assess, analyse, develop, and share digital content and solutions through different media forms. 4. Interact and collaborate through digital platforms/channels. 5. Demonstrate use of digital technology and online presence responsibly, ethically, legally, and with care. 6. Describe current developments and issues in the digital world. 1. Computational Thinking Problem-Solving Techniques 2. Quantitative Reasoning Techniques 3. Managing Cybersecurity 4. The World of Digital Misinformation 5. Principles of Data Ethics in the Digital World 6. Intellectual Properties, Rights and Data Privacy in the Digital World 7. Latest and Emerging Technology Trends","['problem', 'solving', 'technique', 'computational', 'thinking', 'quantitative', 'reasoning', 'identify', 'online', 'threat', 'intellectual', 'property', 'right', 'cybersecurity', 'effective', 'presentation', 'communication', 'collaborative', 'skill', 'team', 'guide', 'problem', 'solving', 'support', 'decision', 'making', 'technology', 'problem', 'solving', 'technique', 'quantitative', 'reasoning', 'right']"
NTU,CZ1007,Data Structures& Algorithms,"This course aims to (i) teach the concepts, implementations and applications of data structures such as arrays, linked lists, stacks, queues and trees that are important for building efficient algorithms; (ii) provide an introduction to algorithm analysis and design.   These are essential for future computer science and computer engineering courses. 1. Select appropriate data structures such as arrays, linked lists, stacks, queues and trees and implement algorithms to solve real world problems using these data structures in C. 2. Conduct complexity analysis of simple algorithms. 3. Select and implement appropriate search algorithm (sequential search, binary search, search using hash tables) as part of a problem solution in C.  Compare the efficiencies of these search algorithms. 4. Select and implement appropriate graph traversal algorithm (DFS, BFS) as part of a problem solution in C.  Analyse the complexities of these graph traversal algorithms Introduction & dynamic memory allocation Static vs dynamic memory allocation. ‘Heap’ management and ‘garbage collection’. Run‐ time memory protection. Overview of node‐based data structures. 2 Linked Lists Linked List structures, doubly linked lists, circular lists. Their implementations in C and examples that use lists. 3 Abstract Data Types and Their Implementation Stacks, queues, priority queues. Their implementations using linked lists.  Use of stacks to evaluate arithmetic expressions and use of queues, priority queues to schedule jobs.   4 Tree Structures Overview of hierarchical/non‐linear data structures. Tree structures and their implementations. Binary vs general trees. Tree traversal: pre‐order, in‐order, post‐order. Expression trees: representation and evaluation.  AVL trees and their balancing.   5 Introduction to algorithms What is an algorithm?  Important problem types in computing. Algorithm design strategies. 6 Analysis of Algorithms Time and space complexities of algorithms. Analyzing basic program constructs. Best case, worst case and average case time complexity analysis. Deducing recurrence relations for time complexity of recursive algorithms. Solving elementary recurrence relations. Asymptotic time complexity analysis. Big‐Oh, big‐Omega, and big‐Theta notations. Common Complexity Classes. Basic techniques for proving asymptotic bounds. Space Complexity. Faster computer or faster algorithms. 7 Searching General exhaustive search. Iterative and recursive sequential search algorithms. Binary search, its invariance, and complexity. Open and closed address hashing using linear probing and double hashing collision resolution techniques. All algorithms covered are accompanied by asymptotic complexity analysis. 8 Graph Representations and Searching Basic graph representation methods, adjacency lists, and adjacency matrix, Systematic graph traversals with breadth‐first search (BFS) and  depth‐first search (DFS) algorithms. A generic backtracking algorithm and its complexity. Eight‐queen, Maze‐Search.  ","['data', 'structure', 'array', 'linked', 'list', 'stack', 'queue', 'tree', 'algorithm', 'analysis', 'design', 'computer', 'science', 'computer', 'engineering', 'data', 'structure', 'array', 'linked', 'list', 'stack', 'queue', 'tree', 'implement', 'algorithm', 'data', 'structure', 'c', 'complexity', 'analysis', 'simple', 'algorithm', 'select', 'implement', 'appropriate', 'search', 'algorithm', 'binary', 'search', 'c', 'search', 'algorithm', 'graph', 'traversal', 'dfs', 'c', 'graph', 'traversal', 'algorithm', 'introduction', 'dynamic', 'memory', 'allocation', 'dynamic', 'memory', 'allocation', 'management', 'garbage', 'collection', 'run', 'time', 'memory', 'protection', 'data', 'structure', 'queue', 'priority', 'queue', 'evaluate', 'arithmetic', 'expression', 'priority', 'queue', 'hierarchical', 'data', 'structure', 'tree', 'structure', 'tree', 'traversal', 'expression', 'tree', 'avl', 'tree', 'program', 'construct', 'worst', 'case', 'complexity', 'analysis', 'relation', 'time', 'complexity', 'recursive', 'algorithm', 'recurrence', 'relation', 'complexity', 'analysis', 'complexity', 'class', 'proving', 'asymptotic', 'bound', 'complexity', 'closed', 'address', 'hashing', 'linear', 'probing', 'double', 'hashing', 'collision', 'resolution', 'complexity', 'analysis', 'graph', 'representation', 'searching', 'graph', 'representation', 'method', 'adjacency', 'list', 'adjacency', 'matrix', 'systematic', 'graph', 'traversal', 'search', 'search']"
NTU,CZ2002,Object Oriented Design and Programming,"The object-oriented paradigm to the design of software is one major successful approach to address
complexity and maintainability issues in software systems. We want students to establish an object-
oriented mindset and to gain valuable insights into how software can be developed using the object-
oriented approach.  This course should not be interpreted to be a pure programming language course. 
Rather, the programming language serves to illustrate, via practical examples, the concepts learnt in
the course.
As a student of this course, you will learn essential object-oriented concepts such as encapsulation,
the separation of design from implementation; the use of inheritance and polymorphism. You will
discover how to describe these concepts using appropriate UML diagrams. Finally, you will also learn
good design principles for reuse, and to realise these principles using object-oriented programming
languages such as Java and/or C++. 1.Explain the concepts of object-oriented methodology and demonstrate it in developing
software programs.
2.Design simple software programmes using good design principles with consideration for reuse
and maintainability, to solve problems.
3. Implement a given design in Java and/or C++.
Page 2 of 3 01 April 2022 Overview of Topics
1 Introduction to Object Orientated Programming
Procedural vs OO programming; Object and Class; Four basic elements and four features of
OO programming.
2 Class and Object
Attributes; Class Definition; Message Sending; Copying Objects; The Keyword 'this‚Äô;
Accessors and Mutators; The Keyword 'static'; Static vs. Instance methods; Object
Composition.
3 Inheritance in Java
Generalisation and Specialisation; Method Overloading & Overriding; Liskov Substitution
Principle; Visibility Modifiers; Final Classes and Methods; Abstract Classes and Methods;
Multiple Inheritance and Interfaces.
4 Exception Handling & Persistent Objects (E-Learning)
Error Handling; Java‚Äôs Exception Handling; Java‚Äôs Exception Hierarchy; Exception Classes;
Object serialisation; Saving objects, e.g. to file, to RDBMS.
5 Polymorphism in Java
Polymorphism; Binding; Object Typecasting; Benefits of Polymorphism; Three ways of Method
Overriding.
6 Object Relationships
Aggregation. Composition. Associations.  Delegation. Cardinality.
7 Object Collaboration
Messages.  Object Interactions. Sequence Flow. UML Sequence Diagram.
8 Modelling OO Application
Identifying Class and Objects, Defining Classing, Use of Class and Sequence
9 Designing for Reuse
Designing for Reuse
Good design principles e.g.  Single Responsibility Principle (SRP).  Don‚Äôt Repeat Yourself
(DRY) Principle, Open-Closed Principle (OCP).   Interfaces and abstract classes. Design by
contract. Inheritance versus Delegation.  Loose coupling.  Design pattern e.g. Singleton,
Fa√ßade.
10 C++ Programming Language
Types and declarations. Pointers and arrays. Expressions and statements.
Functions/Methods. Standard libraries. Transforming class specification into code.
Page 3 of 3 01 April 2022","['object', 'oriented', 'object', 'oriented', 'object', 'oriented', 'concept', 'encapsulation', 'inheritance', 'polymorphism', 'uml', 'diagram', 'object', 'oriented', 'programming', 'language', 'java', 'c', 'object', 'oriented', 'methodology', 'java', 'c', 'object', 'orientated', 'programming', 'procedural', 'v', 'oo', 'programming', 'object', 'class', 'programming', 'object', 'attribute', 'class', 'definition', 'message', 'sending', 'copying', 'object', 'static', 'v', 'instance', 'method', 'object', 'composition', 'java', 'generalisation', 'specialisation', 'method', 'overloading', 'overriding', 'substitution', 'principle', 'visibility', 'modifier', 'final', 'class', 'method', 'abstract', 'class', 'method', 'multiple', 'inheritance', 'interface', 'exception', 'handling', 'persistent', 'object', 'error', 'handling', 'java', 'exception', 'handling', 'java', 'exception', 'hierarchy', 'exception', 'class', 'object', 'java', 'polymorphism', 'binding', 'object', 'way', 'method', 'composition', 'association', 'object', 'collaboration', 'message', 'object', 'interaction', 'sequence', 'flow', 'uml', 'defining', 'repeat', 'open', 'closed', 'principle', 'design', 'pattern', 'singleton', 'c', 'expression', 'statement', 'function', 'method']"
NTU,CC0003,Ethics & Moral Reasoning in a Multi-Cultural World,"This course aims to equip students with the necessary philosophical foundations to understand theories of ethics and subsequently apply those theories to real-life scenarios and issues. It also aims to enable students to understand and critically assess the civic institutions that structure their local and global communities. To these ends, the course will examine the nature of ethics, its understanding across different cultures, and how it is manifested in concepts, social structures, and governance institutions. Topics to be explored include human rights, democracy, freedom of speech and inequality. The rights and duties of citizenship shall be a unifying theme. Students will think through assumptions they hold on all of these matters. They will be provided with the tools to understand various and even contradictory perspectives on these important issues. There will be a substantial amount of time devoted toward understanding Singapore’s own institutions and ideologies, which are of course products specific to the country’s own unique historical and geo-political circumstances. We expect that students will have a better appreciation of the country’s institutions after reading the module. 1. Identify the morally relevant features of situations, decisions, and policies; 2. Explain your moral responsibilities to actively participate in activities that strengthen your local and global communities; 3. Critically assess the civic structures and institutions of your communities and your role in them; 4. Make well-informed arguments on some major contemporary issues. 5. Apply ethics and civics concepts to the Singapore context. 1. Introduction – What is Ethics, Civics, Multiculturalism and how is this relevant to you? 2. Reasoning for ethics and civics + Logic Quiz 3. Human Rights Part 1: Human Trafficking 4. Human Rights Part 2: Disability 5. Reproduction Ethics: Abortion 6. Ethics of Death and Dying: Euthanasia and Assisted Suicide 7. Equality & Meritocracy 8. Multicultralism 9. Political Systems: Types, Features, and Moral Justifications 10. Free Speech: Meanings, Limitations, and Implications","['local', 'global', 'community', 'governance', 'institution', 'situation', 'decision', 'local', 'global', 'community', 'disability', 'reproduction', 'death', 'assisted', 'equality', 'political', 'system', 'feature', 'moral', 'justification', 'limitation', 'implication']"
NTU,CC0005,Healthy Living & Mental Well-being in an Aging Society,"This course aims to provide multi-disciplinary competence in a cross-disciplinary, collaborative learning environment, with student interaction and collaboration across schools as a key learning foundation. As the title connotes, the main objective of this compulsory undergraduate course is to examine what constitutes living a good, healthy, and flourishing life. It provides students with the building blocks to thrive – physically and mentally – in their everyday lives. Students will gain knowledge and skills to develop a physically healthy lifestyle, enhance their awareness of prevalent mental health issues, and be equipped with resources and tools to cope with common situational challenges. By the end of the course, students should also have a deeper appreciation of how physical and mental health are intricately linked. By the end of this course, you should be able to: 1. Describe what healthy living and wellbeing means to you as an undergraduate student. 2. Identify common health and mental issues (including knowing the sources of help) in Singapore and how this knowledge would benefit you and the people around you. 3. Demonstrate coping strategies for developing resilience and self-care, playing an active role in living a healthy and meaningful life. 4. Explain and distinguish between healthy and toxic relationships and apply mitigating skills to resolve relational conflicts. 5. Recognize the importance of self-determination, values-based actions, wisdom, and creativity in the pursuit of personal growth and self-actualization. 6. Explain health and mental health care issues at a global level, in relation to understanding national policies and other related matters. 7. Collaborate effectively on health and wellbeing issues in cross-disciplinary teams. 1. The body-mind-spirit connection for healthy living and wellbeing 2. Health and Nutrition 3. Health and Fitness 4. Health and Disease 5. Health and Maturation 6. Health and Wholeness in Building Resilience 7. Understanding Stress and Fostering Self-care 8. Building Mental Health Awareness and Resources 9. Nurturing Healthy Relationships and Social Wellness 10. Aspiring Personal Growth and Self-actualization 11. Cultivating Wisdom and Creativity for a Flourishing Life","['develop', 'physically', 'healthy', 'lifestyle', 'physical', 'mental', 'health', 'intricately', 'linked', 'healthy', 'living', 'self', 'care', 'playing', 'active', 'role', 'living', 'resolve', 'relational', 'conflict', 'self', 'determination', 'value', 'based', 'action', 'creativity', 'self', 'nutrition', 'health', 'fitness', 'resilience', 'building', 'mental', 'health', 'awareness', 'healthy', 'social', 'self', 'creativity', 'flourishing', 'life']"
NTU,CZ2001,Algorithm Design and Analysis,"This core engineering course aims to develop your knowledge, understanding and skills about algorithms, including: (1) methods and techniques to design and implement algorithms; (2) methods and techniques to analyse the correctness and resource requirements (mainly the time and space complexities) of algorithms. Because algorithms are essential to both Computer Engineering (CE) and Computer Science (CS), this course has vital importance for learning other courses in CE or CS, and shall prepare you for future careers in the science and technology of computing. 1. Conduct complexity analysis of basic algorithms.
2. Design and analyse algorithms using the suitable strategies (e.g. incremental, divide and
conquer, data‐structure, and greedy approaches) to solve a problem.
3. Compare the efficiencies of different algorithms for the same problem (e.g. searching, sorting
or graph traversal).
4. Describe various heuristic problem‐solving methods.
5. Implement algorithms from pseudo code into real code. Introduction to algorithms What is an algorithm? Algorithm design and analysis. Examples of different design: Power function, Sine Function, Maclaurin Series vs CODIC. Mathematical Foundation: Set, Functions, Floor and Ceiling, Power and Logarithm, Summations and Series, Limits, Proof Method. 2 1 0 2 Analysis of Algorithms Time and space complexities of algorithms. Analyzing basic program constructs. Best case, worst case and average case time complexity analysis. Deducing recurrence relations for time complexity of recursive algorithms. Solving elementary recurrence relations. Asymptotic time complexity analysis. Big-Oh, bigOmega, and big-Theta notations. Common Complexity Classes. Basic techniques for proving asymptotic bounds. Space Complexity. Faster computer or faster algorithms. 5 2 2 3 Searching Iterative and recursive sequential search algorithms. Binary search, its invariance, and complexity. Open and closed address hashing using linear probing and double hashing collision resolution techniques. All algorithms covered are accompanied by asymptotic complexity analysis. 2 1 2 4 Sorting Insertion-sort, Heap-sort, Quick-sort, Merge-sort, which contrast three approaches: Incremental, Data Structures and Divide-and-Conquer. All algorithms covered are accompanied by asymptotic complexity analysis. 6 3 2 5 Graphs Basic graph representation methods, adjacency lists, and adjacency matrix, Systematic graph traversals with breadth-first search (BFS) and depth-first search (DFS) algorithms. A generic backtracking algorithm and its complexity. Maze-Search. Introduction to Greedy algorithms; Dijkstra’s Single-source Shortest Paths algorithm, Correctness proof and complexity of Dijkstra’s algorithm. Minimum Spanning trees and their properties. Greedy algorithm for finding Minimum Spanning Trees (MSTs) using Prim’s algorithm. 6 3 2 6 Basic Computability and Complexity Theory Tractable and intractable problems. Un-computable functions. The Halting Problem. Non-determinism as a computational model. The Classes NP and P. Brute-force and heuristic algorithms Nearest-link-first and shortest-link-first for Travelling Sales Person (TSP) problem.","['design', 'implement', 'algorithm', 'analyse', 'correctness', 'resource', 'requirement', 'mainly', 'time', 'space', 'complexity', 'algorithm', 'computer', 'engineering', 'ce', 'computer', 'science', 'c', 'ce', 'c', 'complexity', 'analysis', 'divide', 'data', 'structure', 'problem', 'searching', 'graph', 'traversal', 'algorithm', 'design', 'analysis', 'power', 'function', 'sine', 'function', 'function', 'floor', 'ceiling', 'power', 'logarithm', 'summation', 'series', 'limit', 'proof', 'method', 'analysis', 'algorithm', 'program', 'construct', 'worst', 'case', 'complexity', 'analysis', 'relation', 'time', 'complexity', 'recursive', 'algorithm', 'recurrence', 'relation', 'complexity', 'analysis', 'big', 'oh', 'big', 'theta', 'notation', 'complexity', 'class', 'proving', 'asymptotic', 'bound', 'searching', 'complexity', 'closed', 'address', 'hashing', 'linear', 'probing', 'double', 'hashing', 'collision', 'resolution', 'complexity', 'analysis', 'insertion', 'sort', 'heap', 'sort', 'quick', 'sort', 'merge', 'sort', 'contrast', 'three', 'approach', 'data', 'structure', 'divide', 'conquer', 'algorithm', 'complexity', 'analysis', 'graph', 'representation', 'method', 'adjacency', 'list', 'adjacency', 'matrix', 'systematic', 'graph', 'traversal', 'greedy', 'algorithm', 'correctness', 'proof', 'complexity', 'minimum', 'spanning', 'tree', 'prim', 'algorithm', 'computability', 'complexity', 'theory', 'tractable', 'halting', 'problem', 'np', 'p', 'brute', 'force', 'heuristic', 'algorithm', 'nearest', 'link', 'first', 'shortest', 'link', 'first', 'travelling', 'sale', 'person']"
NTU,CZ2006,Software Engineering,"Understand the roles and purposes of various activities in software engineering process. a. Participate in all stages of the Software Development Life Cycle for a medium-size software project to deliver the required work products. 
b. Elicit and specify requirements clearly and correctly. 
c. Use good design concepts and considerations. 
d. Design and carry out test activities to verify that requirements have been met. 
e. Perform simple project management of a medium-size software project. Introduction to Software Engineering; Software Engineering Process; Introduction to Requirements; Introduction to Software Specifications; Software Design and Construction; Testing and Integration; Software Maintenance; Software Project Management; Software Quality; Dependability and Security","['software', 'engineering', 'software', 'size', 'software', 'project', 'b', 'elicit', 'specify', 'requirement', 'design', 'carry', 'test', 'activity', 'size', 'software', 'project', 'software', 'engineering', 'software', 'engineering', 'process', 'software', 'specification', 'software', 'design', 'construction', 'testing', 'integration', 'software', 'maintenance', 'project', 'management', 'software', 'quality', 'dependability', 'security']"
NTU,MH2500,Probability and Introduction to Statistics,"This is a core mathematical course, aiming to develop your understanding of fundamental concepts in probability and statistics such as random variables, independence, basic probability distributions, and confidence intervals. The course also prepares you for further statistics courses such as MH3500 in the Statistics Track. Calculate probabilities of events concerning discrete distributions by counting
Calculate conditional probabilities with Bayes Theorem
Describe a probability distribution using cdf/pdf, including joint and marginal distributions
Identify the scenarios which certain probability distributions are appropriate to model
Calculate the expectation/variance/mgf/quantiles of a probability distribution/random variable, including marginal distributions
Calculate the distribution of functions of random variables (especially the sum and quotient of two random variables) and the covariance of two random variables
Prove or disprove that two random variables are independent
Explain central limit theorem and its significance, and apply central limit theorem to approximate the probability of event concerning a sum of random variables
Conduct simple hypothesis tests Events, probabilities, law of total probability, Bayes theorem Independence events, discrete distributions
Discrete distributions, continuous distributions
Continuous distributions
Continuous distributions; joint distribution, marginal and conditional distribution for discrete variables 
Joint distribution, marginal and conditional distribution for conditional variables Functions of two or more random variables, order statistics
Expectation, variance, Chebyshev inequality
Covariance
Conditional expectation and moment generating functions Law of large numbers, central limit theorem
Random sampling, estimation of parameters
Hypothesis testing","['probability', 'statistic', 'random', 'variable', 'independence', 'probability', 'distribution', 'confidence', 'interval', 'event', 'concerning', 'discrete', 'distribution', 'counting', 'calculate', 'conditional', 'probability', 'bayes', 'theorem', 'cdf', 'pdf', 'joint', 'marginal', 'distribution', 'probability', 'distribution', 'expectation', 'variance', 'mgf', 'quantiles', 'probability', 'distribution', 'random', 'variable', 'marginal', 'distribution', 'random', 'variable', 'central', 'limit', 'theorem', 'probability', 'random', 'variable', 'probability', 'probability', 'bayes', 'theorem', 'independence', 'event', 'discrete', 'distribution', 'discrete', 'distribution', 'continuous', 'distribution', 'continuous', 'distribution', 'continuous', 'distribution', 'joint', 'distribution', 'marginal', 'conditional', 'distribution', 'discrete', 'variable', 'joint', 'distribution', 'marginal', 'conditional', 'distribution', 'conditional', 'variable', 'function', 'order', 'statistic', 'expectation', 'variance', 'chebyshev', 'inequality', 'covariance', 'conditional', 'expectation', 'moment', 'generating', 'function', 'law', 'large', 'number', 'central', 'limit', 'theorem', 'random', 'sampling', 'estimation', 'parameter', 'hypothesis', 'testing']"
NTU,MH2802,Linear Algebra for Scientists,"1. Acquire a wider range of mathematical concepts related to vector spaces and linear algebra.
2. Develop a strong set of mathematical skills for upper level Physical and Computing Science
courses.
3. Develop thinking, reasoning, communication and modelling skills through a mathematical
approach to problem-solving
4. Connect ideas within mathematics and apply mathematics in the contexts of Physical and
Computing Science courses.
5. Experience and appreciate the rigour and abstraction in the discipline. Basic Vector Operations (BAS) 1. perform simple vector operations (such as vector addition, subtraction and resolving a vector to its components in a given coordinate system) to solve related problems; 2. perform scalar, vector products whenever appropriate to solve related problems (such as determining the projection of a vector on another and calculating the torque of a system of forces); 3. perform scalar, vector triple products whenever appropriate to solve related problems; 4. solve basic problems in analytical geometry using vectors (such as determining distances between point and a line / plane); Linear Spaces (LS) 5. recall and use the axioms of a linear space to determine if a given set forms a linear space; 6. apply the idea of linear independence to determine whether a given set of vectors is dependent or independent; 7. explain the idea of the space / subspace is spanned by a given set of (basis) vectors and determine if a set of (basis) vectors span a subspace; 8. apply the concepts of norms and inner products to compute for a given pair of vectors and to test if a given pair of vectors are orthogonal; Nanyang Technological University Division of Physics and Applied Physics 2 Linear Transformation and Matrices (LTM) 9. explain the concept of linear transformation, express a linear transformation as a matrix and compute the action of a linear transformation on a vector and a matrix (including the structures of rotation, reflection, scaling, stretching and shearing matrices); 10. perform basic operations on matrices (including basic algebraic operations, matrix multiplication, computing of inverses, determinants and traces of matrices); 11. solve systems of linear equations using techniques such as Gaussian elimination; 12. compute the eigenvalues, eigenvectors of a given square matrix and determine the similarity transformation that diagonalizes the given square matrix; 13. recall the definitions and use the properties of special matrices (such as Hermitian and unitary matrices); and Applications (APP) 14. apply the techniques from ILO 1 – 13 to solve problems in Physical and Computing Science (such as analysing coupled oscillators and using Markov chains to solve problems) 1. Vector Algebra & Analytical Geometry 2. Linear Spaces 3. Linear Transformations & Matrices 4. Eigenvalues and Eigenvectors 5. Applications of Linear Algebra to problems in Physical and Computing Science","['vector', 'space', 'linear', 'algebra', 'mathematical', 'skill', 'thinking', 'reasoning', 'communication', 'modelling', 'skill', 'basic', 'vector', 'operation', 'ba', 'simple', 'vector', 'operation', 'vector', 'addition', 'subtraction', 'vector', 'product', 'determining', 'vector', 'triple', 'product', 'analytical', 'geometry', 'determining', 'distance', 'point', 'line', 'plane', 'linear', 'space', 'l', 'recall', 'use', 'axiom', 'linear', 'space', 'linear', 'space', 'linear', 'independence', 'norm', 'inner', 'product', 'technological', 'university', 'division', 'physic', 'applied', 'physic', 'linear', 'transformation', 'matrix', 'linear', 'transformation', 'express', 'linear', 'transformation', 'compute', 'action', 'vector', 'rotation', 'reflection', 'algebraic', 'operation', 'matrix', 'multiplication', 'determinant', 'linear', 'equation', 'using', 'technique', 'gaussian', 'elimination', 'eigenvectors', 'given', 'square', 'matrix', 'determine', 'similarity', 'transformation', 'hermitian', 'unitary', 'matrix', 'analysing', 'markov', 'vector', 'algebra', 'analytical', 'geometry', 'linear', 'transformation', 'matrix', 'eigenvectors', 'linear', 'algebra']"
NTU,CC0006,"Sustainability: Society, Economy & Environment","This course aims to provide multi-disciplinary competence in a cross-disciplinary, collaborative learning environment, with student interaction and collaboration across schools as a key component. In this course, you will systematically analyse major current sustainability challenges from the perspectives of society, economy, and the environment, with specific focus on Singapore. The course aims to stimulate critical thinking, curiosity, and the ability to structure and synthesise knowledge through the lens of sustainability. Emphasis is on the need to address sustainability issues from different perspectives and at different scales, reinforced by concrete examples such as palm oil production, waste management, pollution & human consumption, and climate change. The course will look at how we can promote a more sustainable world through choices and actions, as individuals, societies, nations, and as a global community. By the end of the course, you would have developed an awareness for, and a systems thinking approach to, sustainability, which you can continue to develop no matter which discipline or career path you choose to embark on. 1. Explain the multidimensional systemic nature of sustainability. 2. Analyse sustainability challenges from social, economic, and environmental perspectives. 3. Identify and present possible solutions for a sustainable world on different scales for the individual, organisations, Singapore, and globally. 4. Critically discuss sustainability issues in small and large group settings. 5. Collaborate effectively on sustainability issues in cross-disciplinary teams. 6. Evaluate the work of peers on sustainability. 1. Why each discipline should know about sustainability. 2. The three systems: Society, Economy, and Environment. How sustainable development depends on all three systems, and how to analyse the course topics from these three perspectives. 3. Energy and Climate Change, sustainable and reliable sources, mitigation of climate change. 4. Food system sustainability and global food security.* 5. Responsible consumption and production - waste reduction. 6. Water – availability and sustainable management of water resources.* 7. Pollution – air, plastics, light, noise.* 8. How unequal is the world? Poverty and equality - how to measure it, how widespread it is, how to eradicate it 9. Sustainable cities. Role of big cities in sustainability development. What is a sustainable city?* 10. Planetary boundaries, Earth system feedbacks and tipping points – staying in control of our planet and its systems.","['sustainability', 'global', 'food', 'responsible', 'consumption', 'production', 'waste', 'reduction', 'plastic', 'light', 'noise', 'earth', 'system', 'feedback', 'tipping', 'point', 'planet']"
NTU,ML0004,Career and Entrepreneurial Development for the Future World,"In today’s competitive and rapidly evolving world, students must equip themselves with critical career skills and a deep sense of workplace values and ethics, and possess an innovative and enterprising ethos whether they are joining an established enterprise or starting a new enterprise. This course is a compulsory foundation module for all NTU students on essential career preparation and innovative enterprising skills and should be completed by students before they start their internship. This course equips students with practical skills needed in their career preparation and development (including skills required for internship stints and graduation job search) to help students succeed in a new disruptive workplace. Students will learn the fundamental techniques and concepts of Business Model Innovation and apply them in teams to find innovative and viable solutions to real-life problems posed by partnering enterprises. In the process of working in teams, students will further hone their teamwork skills. 1. Describe the implications and impact of Future of Work on their personal and professional development 2. Demonstrate the professional skills required and the importance of entrepreneurship in 21st -century economics 3. Explain the innovative enterprising mindset 4. Identify career values, occupational interests, personality and motivated skills (VIPS) and learn the 4-stage career development plan in deciding their career paths (‘SODA’) 5. Demonstrate the fundamental skills to kickstart their Career Development 6. Describe the competitive advantages and entrepreneurial ecosystem for startups in Singapore 7. Develop the fundamental skills to identify and develop an innovative and enterprising idea/solution into a plan of action 8. Identify networking dos and don’ts to navigate networking opportunities 9. Prepare a short presentation on an innovative and enterprising idea/solution to address an opportunity or problem 10. Identify ethical and workplace-related issues 11. Develop problem-solving skills through collaborative learning via group projects with students from different Schools/Colleges to complete a common goal 1. Future of Work & Developing an Innovative and Enterprising Mindset 2. Charting a Career Path 3. Fundamental Skills to Start a New Enterprise 4. Fundamental Skills for Career Development 5. Building Networking Skills for Career & Enterprise 6. Handling Ethical & Workplace Issues Professionally","['business', 'model', 'innovation', 'working', 'team', 'st', 'century', 'personality', 'motivated', 'skill', 'stage', 'ecosystem', 'startup', 'identify', 'develop', 'innovative', 'idea', 'solution', 'plan', 'action', 'school', 'college', 'developing', 'innovative', 'mindset', 'charting', 'career', 'start', 'new', 'enterprise', 'fundamental', 'handling', 'ethical', 'workplace', 'issue']"
NTU,CZ2007,Introduction to Database Systems,"Overview of Database Management Systems (DBMS); Entity-Relationship Data Model; Relational Data Model; Functional Dependencies (FD) and Normalization; Relational Algebra; Structured Query Language (SQL); Storage of Relational Data; Indexing Techniques; Query Processing and Optimization; Transaction Management and Concurrency Control NIL DataManagement, Databases, DataModeling, SqlKeywords, DatabaseManagementSystems, uniqueKey, RelationalDatabase, RelationalAlgebra, Superkey, join, Relation, ForeignKey","['database', 'management', 'system', 'dbms', 'entity', 'relationship', 'data', 'model', 'relational', 'data', 'model', 'functional', 'dependency', 'fd', 'normalization', 'relational', 'algebra', 'structured', 'query', 'language', 'sql', 'relational', 'data', 'indexing', 'technique', 'query', 'processing', 'optimization', 'transaction', 'management', 'concurrency', 'control', 'nil', 'database', 'relation']"
NTU,CZ3005,Artificial Intelligence,"This course introduces topics in human cognition and various well-established paradigms pertaining to the formal representations of artificial intelligence and knowledge engineering for computational problem solving.
1. Human brain and Cognitive structure: thinking and acting. The foundation of AI.
2. Structure of intelligent agents
3. Procedural Representation (Algorithmic)
4. Symbolic Representation (Knowledge Engineering) a) Understand what Artificial Intelligence is about and appreciate its relevance to Computer Science and importance for IT and society.
b) Understand the human cognitive organisation in problem solving and appreciate the ethics involved in the application of AI techniques.
c) Understand the principles of problem solving and of the state space search approach, be able to efficiently formulate a problem and evaluate its complexity, master various search algorithms, and be capable of selecting and applying these techniques appropriately. 
d) Be familiar with techniques for computer-based representation and manipulation of complex information and knowledge, understand formal logic inference and reasoning algorithms, and be able to employ these tools to build knowledge-based systems. 
e) Gain awareness of several advanced AI applications and topics such as intelligent agents, constraint satisfaction, game playing, applied expert systems, approximate reasoning, probabilistic reasoning and machine learning.  NIL","['artificial', 'intelligence', 'knowledge', 'engineering', 'intelligent', 'agent', 'procedural', 'representation', 'symbolic', 'representation', 'knowledge', 'engineering', 'artificial', 'intelligence', 'computer', 'science', 'importance', 'society', 'evaluate', 'complexity', 'master', 'various', 'search', 'algorithm', 'selecting', 'technique', 'reasoning', 'algorithm', 'build', 'knowledge', 'based', 'system', 'intelligent', 'agent', 'constraint', 'satisfaction', 'game', 'playing', 'applied', 'expert', 'system', 'approximate', 'reasoning', 'probabilistic', 'reasoning', 'machine', 'learning', 'nil']"
NTU,MH3500,Statistics,"This course aims to develop your understanding of the statistical concepts of parameter estimation and hypothesis testing that are fundamental for real life applications of statistics as well as for numerous further courses in the curriculum of the statistics track. Apply basic probability concepts such as PMF, PDF, CDF, expected values, variance, and moments in a statistical context and perform the involved computations of series and integrals.
Use standard probability distributions to model statistical scenarios and to derive useful conclusions from computations based on these distributions.
Explain the relevance of the Central Limit Theorem for statistics.
Construct parameter estimators using the maximum likelihood method and the method of moments.
Rigorously assess the quality of parameter estimators.
Analyse the asymptotic properties of parameter estimators.
Construct exact and approximate confidence intervals.
Explain the purpose and philosophy of hypothesis testing, as well as the meaning of p-values.
Given a dataset, create and apply a useful hypothesis test based on these data.
Compute the size and power of a hypothesis test.
Construct most powerful tests using the Neyman-Pearson Lemma. Review of probability

Random samples, sample mean and sample variance, distributions derived from the normal distribution, Central Limit Theorem and its significance for statistics

Introduction to parameter estimation, quality criteria for parameter estimators

Constructing good estimators: method of moments and maximum likelihood method

Asymptotic properties of estimators, Cramer-Rao bound and efficient estimators

Confidence intervals for estimators

Introduction to hypothesis testing and Fisher-type tests

Neyman-Pearson tests and Neyman-Pearson Lemma","['parameter', 'estimation', 'hypothesis', 'testing', 'statistic', 'probability', 'concept', 'pmf', 'pdf', 'cdf', 'expected', 'value', 'series', 'integral', 'probability', 'distribution', 'model', 'statistical', 'scenario', 'central', 'limit', 'theorem', 'statistic', 'construct', 'parameter', 'estimator', 'maximum', 'likelihood', 'method', 'quality', 'parameter', 'estimator', 'parameter', 'estimator', 'confidence', 'interval', 'purpose', 'hypothesis', 'testing', 'hypothesis', 'test', 'based', 'size', 'hypothesis', 'test', 'construct', 'neyman', 'pearson', 'lemma', 'probability', 'random', 'sample', 'sample', 'mean', 'sample', 'variance', 'distribution', 'derived', 'central', 'limit', 'theorem', 'parameter', 'estimation', 'quality', 'criterion', 'parameter', 'estimator', 'moment', 'maximum', 'likelihood', 'method', 'estimator', 'cramer', 'rao', 'bound', 'efficient', 'estimator', 'confidence', 'interval', 'estimator', 'hypothesis', 'testing', 'fisher', 'type', 'test', 'neyman', 'pearson', 'test', 'neyman', 'pearson', 'lemma']"
NTU,MH3511,Data Analysis with Computer,"In today's business, data analysis plays an important role in making decisions more scientific and helping the business achieve effective operation. By closely examining data we can find patterns to perceive information, and the information can be used to enhance knowledge. This course provides basic concepts for data analysis with the usage of the R programming language. You will learn the skills of plotting, summarising, making inferences, and presenting various types of data. Evaluate the value of Mathematical functions using R. Writing R program to perform a given algorithm.
Distinguish between different types of measurement scales.
Explain the meaning of statistical quantities, such as mean, median, variance, etc., and compute the sample values of a given dataset.
Use R to construct histogram, boxplot, scatterplot, qq-plot, etc.
Construct point and confidence interval estimates for the population parameters using R.
Explain the meaning of Type I and Type II errors, and perform statistical hypothesis testing for various types of dataset.
Perform statistical inference on categorical dataset.
Use parametric methods as an alternative approach to data analysis.
Perform linear regression and check for model assumptions. Basic of R programming • Basic R syntax • Write mathematical expression in R language • Variable, vector, matrix and dataframe, and their operations in R • Importing dataset into R, subsetting dataset • Basic loops in R

Describing Data • Basic parameters such as mean, median, standard deviation, variance, inter-quartile range • Boxplot, histogram, stem-leaf plot • Normality checks, qq-plot, outlier, transformation

Statistical Inference • Sample, sampling distribution • Central Limit Theorem • Confidence Interval • Statistical hypothesis testing, Type I and Type II errors, p-value

Categorical Data • Proportion estimate, testing of proportion parameter • Goodness-of-fit test • Two-way contingency table • Paired 2-way contingency table

Multiple Samples • Two independent samples, inference on mean difference • Two dependent samples • Multiple (>2) independent samples, ANOVA test • Multiple (>2) dependent samples

Nonparametric Tests • Quantile test • Wilcoxon rank-sum test • Kruskal-Wallies Test • Sign test, Wilcoxon signed-rank test • Friedman test

Correlation and Regression • Correlation coefficient, its confidence interval and statistical test • Simple linear regression model • Inference on the parameters of linear model • Prediction inference • Model checking","['data', 'analysis', 'data', 'analysis', 'r', 'programming', 'language', 'plotting', 'making', 'inference', 'presenting', 'various', 'type', 'data', 'evaluate', 'value', 'mathematical', 'function', 'r', 'writing', 'r', 'program', 'mean', 'compute', 'sample', 'value', 'r', 'construct', 'histogram', 'qq', 'plot', 'construct', 'point', 'confidence', 'interval', 'estimate', 'meaning', 'type', 'type', 'ii', 'error', 'statistical', 'hypothesis', 'testing', 'categorical', 'dataset', 'parametric', 'method', 'data', 'analysis', 'linear', 'regression', 'programming', 'basic', 'r', 'syntax', 'write', 'mathematical', 'expression', 'language', 'variable', 'vector', 'matrix', 'r', 'importing', 'dataset', 'dataset', 'loop', 'r', 'data', 'basic', 'parameter', 'mean', 'standard', 'deviation', 'variance', 'inter', 'range', 'stem', 'leaf', 'plot', 'normality', 'check', 'qq', 'plot', 'outlier', 'transformation', 'statistical', 'inference', 'sample', 'sampling', 'distribution', 'central', 'limit', 'theorem', 'confidence', 'interval', 'statistical', 'hypothesis', 'testing', 'error', 'p', 'value', 'categorical', 'data', 'proportion', 'estimate', 'testing', 'proportion', 'parameter', 'goodness', 'fit', 'test', 'two', 'way', 'contingency', 'table', 'paired', 'sample', 'two', 'independent', 'sample', 'inference', 'mean', 'difference', 'anova', 'test', 'multiple', 'nonparametric', 'test', 'quantile', 'test', 'rank', 'test', 'kruskal', 'test', 'sign', 'test', 'wilcoxon', 'signed', 'rank', 'test', 'friedman', 'test', 'correlation', 'regression', 'correlation', 'coefficient', 'statistical', 'test', 'simple', 'linear', 'regression', 'model', 'linear', 'model', 'model']"
NTU,HW0218,Communication Across the Sciences,"The aim of the course is to enhance the abilities of science students to recognize and employ effective skills and strategies for written and oral communication in both academic and public settings. On the one hand, the emphasis of this course is on basic micro skills in scientific communication such as searching academic databases, critically reading scientific texts, citing from sources, composing scientific arguments, and making effective presentations. On the other hand, it introduces you to the conventions of scientific texts such as annotated bibliographies and proposals that require a combination of informative, evaluative, and persuasive writing skills. In addition, you will have an opportunity to share your ideas with your peers through group discussions, in-class presentations on current scientific topics and poster presentations of your proposals. Using a pre-determined set of evaluation criteria, you will give feedback to your peers on the course assignments, under the supervision of your tutors. The course will culminate with a poster presentation session where you will present your proposals to the wider scientific community in your schools for an authentic communication experience. Through this course, it is hoped that you will become better communicators when conveying your scientific ideas in writing and speech to your peers and an educated audience. 1. Evaluate scientific texts; 2. Cite texts appropriately; 3. Write scientific texts such as annotated bibliographies and proposals; and 4. Present posters of your proposals to your peers and the wider scientific community. NIL","['written', 'oral', 'communication', 'academic', 'public', 'setting', 'scientific', 'communication', 'searching', 'academic', 'database', 'critically', 'reading', 'scientific', 'text', 'citing', 'source', 'composing', 'scientific', 'argument', 'effective', 'presentation', 'writing', 'skill', 'nil']"
NTU,CC0007,Science&Technology for Humanity,"The course aims to inspire a long-lasting mindset of awareness, critical thinking, curiosity, and collaboration across disciplines through the lens of contemporary and near-future challenges for human communities in relation to scientific and technological innovations. Students will learn to perceive and analyse the potential benefits and costs of scientific/technological innovations and applications from different perspectives and on different scales. Students will then use these skills to identify real-life challenges and to propose solutions. 1. (Content) Describe the basic scientific/technical principles of the featured cutting-edge fields/innovations; the
kinds of human problems/challenges that these are meant to address; and the additional problems/challenges
posed in and by their application.
2. (Interdisciplinary) Describe and analyse connections between, three general classes of perspectives on the
challenges of innovation and application: scientific/technical, business, and humanistic/social scientific
perspectives
3. (Critical thinking) Identify, critique, and evaluate ethical, financial, organisational, legal, social, and cultural
components surrounding the application of technological innovations.
4. (Problem solving) Identify and present possible innovations and solutions for their application that would
achieve a consensual balance between scientific-business-social concerns.
5. (Team) Collaborate effectively on project development in cross-disciplinary teams. 1. Ways in which Science and Technology can be understood as being for Humanity. 2. 3 Perspectives on the relations Science-Humanity: Science/Tech, Business, Humanities/Social Science (i.e. Innovation, Application, Impact). 3. Introduction of “Circular model” for thinking about Science-Humanity/Humanity-Science relations (Why and how humans make science? How and why science impacts humans?). 4. Application of circular model through major humanistic themes (e.g. life, equality, prosperity) with respect to applications of specific technological examples. 5. Detailed consideration of scientific-business-social challenges related to at least three major fields of cuttingedge scientific and technological development (e.g. Artificial intelligence, Data Analytics, Metaverse, Synthetic Biology).","['critical', 'thinking', 'curiosity', 'collaboration', 'across', 'discipline', 'scientific', 'technical', 'principle', 'featured', 'describe', 'analyse', 'connection', 'innovation', 'social', 'scientific', 'evaluate', 'ethical', 'financial', 'legal', 'social', 'cultural', 'identify', 'present', 'possible', 'innovation', 'science', 'tech', 'business', 'humanity', 'social', 'science', 'innovation', 'application', 'impact', 'science', 'humanity', 'humanity', 'science', 'relation', 'artificial', 'intelligence', 'data', 'analytics', 'synthetic', 'biology']"
NTU,CZ4041,Machine Learning,"The course is to introduce the principles of various fundamental machine learning techniques and their applications in data mining, computer vision and other fields. It covers areas ranging from unsupervised learning to supervised learning as well as the various applications of machine learning that may be encountered in industry. 1. Explain the motivations and principles behind various machine learning algorithms.
2. Apply or even design specific machine learning algorithms to solve real-world application
problems.
3. Identify some state-of-the-art machine learning techniques.
4. Conduct research on machine learning. Overview of machine learning and its applications; Decision Theory and Bayes Models; Classifier Evaluation; Classification: Decision trees, artificial neural networks, linear and kernelized support vector machines, K-nearest neighbour classifiers, linear regression and its kernelized extension; Ensemble Learning; Clustering; Dimension Reduction; Density","['machine', 'learning', 'technique', 'data', 'mining', 'computer', 'vision', 'unsupervised', 'learning', 'supervised', 'learning', 'machine', 'learning', 'machine', 'learning', 'machine', 'learning', 'machine', 'learning', 'machine', 'learning', 'machine', 'learning', 'decision', 'theory', 'bayes', 'model', 'classifier', 'evaluation', 'classification', 'decision', 'tree', 'artificial', 'neural', 'network', 'linear', 'kernelized', 'support', 'vector', 'machine', 'k', 'nearest', 'neighbour', 'classifier', 'linear', 'regression', 'ensemble', 'learning', 'clustering', 'dimension', 'reduction']"
NTU,CZ4032,Data Analytics and Mining,"This subject covers a comprehensive introduction to data analytics and mining. Introduction of Data Analytics & Mining; Data Pre-processing; Data Analytics & Visualization; Cluster Pattern Analysis; Predictive Pattern Mining; Association Rule Mining; Anomaly Detection. a) Understand the multidisciplinary nature of data analytics, data mining and knowledge discovery
b) Become familiar with some basics and current research issues in data mining
c) Acquire hands-on experience in using conventional data mining software/tools
d) Ability to critically evaluate original research papers
e) Ability to communicate complex technical material orally and in written form
f) Ability to learn independently by continuous interactions with a set of self-learning modules that complement the physical contact hours Data Pre-processing; Data Analytics & Visualization; Cluster Pattern Analysis; Predictive Pattern Mining; Association Rule Mining; Anomaly Detection.","['data', 'analytics', 'mining', 'data', 'analytics', 'mining', 'data', 'pre', 'processing', 'data', 'analytics', 'visualization', 'cluster', 'pattern', 'analysis', 'predictive', 'pattern', 'mining', 'association', 'rule', 'mining', 'anomaly', 'detection', 'data', 'analytics', 'data', 'mining', 'data', 'mining', 'data', 'mining', 'evaluate', 'original', 'research', 'communicate', 'complex', 'technical', 'material', 'self', 'learning', 'module', 'data', 'analytics', 'visualization', 'cluster', 'pattern', 'analysis', 'predictive', 'pattern', 'mining', 'association', 'rule', 'mining', 'anomaly', 'detection']"
NTU,MH2100,Calculus III,"Calculus III is a core Mathematics course that extends concepts and techniques developed in Calculus I and Calculus II to the case of functions of several real variables. In other words, we try to do the same things as in Calculus I and II, but in higher dimensions. In this course, we shall discuss the notions of limits, continuity, derivatives and integrals of real-valued and vector-valued functions of many variables. Most of the time, extending these familiar notions from one to several variables requires some degree of ingenuity, and we are going to have to spice up the material from Calculus I and II with a little bit of geometry and linear algebra. Techniques learned in Calculus III are essential for financial analysts, engineers, and for further study in mathematics. 1. parametrise curves and their tangents;
2. approximate and optimise multivariate functions;
3. apply the chain rule to multivariate functions;
4. find volumes of geometrical objects in higher dimensions;
5. parametrise surfaces and their tangent planes;
6. recognise when it is appropriate to use cylindrical and spherical coordinates;
7. determine the div and curl of a vector field and recognise the physical interpretations of
these quantities;
8. apply Stokes’ theorem and its specialisations to simplify relevant problems;
9. apply multivariate calculus to real-world problems. Parametric equations, polar coordinates. Vector-valued functions, calculus of vector-valued
functions. Functions of more than one variable, limits, continuity, partial derivatives,
differentiability and total differential, chain rule, directional derivatives, gradients, Lagrange
multipliers. Double integrals, area of a surface, triple integrals. Line integrals, Green's Theorem,
surface integrals, Gauss' divergence theorem, Stokes' Theorem.","['calculus', 'iii', 'calculus', 'calculus', 'calculus', 'ii', 'limit', 'continuity', 'derivative', 'integral', 'real', 'valued', 'vector', 'valued', 'function', 'degree', 'geometry', 'linear', 'algebra', 'calculus', 'mathematics', 'chain', 'multivariate', 'function', 'recognise', 'parametric', 'equation', 'polar', 'coordinate', 'vector', 'valued', 'function', 'calculus', 'vector', 'valued', 'function', 'limit', 'continuity', 'partial', 'derivative', 'chain', 'rule', 'directional', 'derivative', 'gradient', 'lagrange', 'multiplier', 'double', 'integral', 'surface', 'triple', 'integral', 'line', 'integral', 'green', ""'s"", 'theorem', 'surface', 'integral', 'gauss', ""'"", 'divergence', 'theorem', 'stokes', ""'"", 'theorem']"
NTU,SD3079,Professional Internship,"Professional Internship Self-sourced by Student OR via Career & Attachment Office
(CAO) The purposes of the internship programme are to supplement NTU's in-house practical professional training and to lessen the on-the-job training of these students when they graduate. It is also to instil the right kind of work attitude and work professionalism, so that they can become effective and productive to their respective organisations much sooner than is usual for fresh graduates.  NIL","['cao', 'nil']"
NTU,SC4079,Final Year Project,"Semester-long research course on an advanced topic, under the supervision of a faculty member, leading to a research thesis. Must be taken over two consecutive semesters. The purpose of this Final Year Project programme is to enable the application of knowledge and skills you have learned in the university in an authentic research environment. This is such that you can gain relevant exposures and develop research experiences and skills that will facilitate your career decision and future transition into your selected vocation. It allows you to develop research competencies that will enhance your employability and lifelong learning capabilities to support your career and life endeavours and your readiness for the future of work. The Final Year Project programme provides an opportunity to apply and integrate the knowledge you have gained through various subjects in your degree programme, and to demonstrate practical research skills through solving real life problems in related field. NIL","['develop', 'research', 'competency', 'lifelong', 'learning', 'nil']"
SMU,ACCT420,Forecasting and Forensic Analytics,"This course explores how data can be used to solve problems across financial accounting, managerial accounting, and audit contexts. Students will gain exposure to techniques to explore how financial and non-financial data is used to forecast events, detect financial discrepancies and frauds, predict corporate default, optimize operations, and determine business strategy. Some programming and data visualisation skills will be required to draw insights from large volumes of data. Advanced analytics methods such as text analytics, neural networks and deep learning will also be introduced. This course has been designed to equip students with an analytics mind-set to develop analytics strategies and make better business decisions.","['financial', 'accounting', 'managerial', 'accounting', 'audit', 'financial', 'non', 'financial', 'data', 'forecast', 'event', 'detect', 'financial', 'discrepancy', 'fraud', 'predict', 'corporate', 'default', 'optimize', 'operation', 'determine', 'business', 'strategy', 'data', 'visualisation', 'text', 'analytics', 'neural', 'network', 'deep', 'learning']"
SMU,COR1305,Spreadsheet Modeling and Analytics,"In this course, students acquire practical skills (bridging technology and real-world situations) in modeling and resolving business problems using personal computers. With computers becoming essential tools for executives in most organisations, knowing how to effectively use them to solve problems will be very helpful in other business courses and the student's future professional career.

Objectives
Upon completing the course, students will
• Know how to frame problems, and integrate various analytical skills (e.g. statistics and mathematics) to model and address management concerns.
• Be comfortable with the personal computer, motivated to self-learn problem analysis computer tools and know where to get relevant information and system resources.
• Be familiar with a variety of software solutions (e.g. add-ins) and gain competency in using a spreadsheet application as an analysis, model verification, simulation and management reporting tool.","['modeling', 'statistic', 'mathematics', 'spreadsheet', 'application', 'analysis', 'model', 'verification', 'simulation', 'management', 'reporting', 'tool']"
SMU,CS420,Introduction to Artificial Intelligence,"Artificial Intelligence (Artificial Intelligence) aims to augment or substitute human intelligence in solving complex real world decision making problems. This is a breadth course that will equip students with core concepts and practical know-how to build basic AI applications that impact business and society. Specifically, we will cover search (e.g., to schedule meetings between different people with different preferences), probabilistic graphical models (e.g. to build an AI bot that evaluates whether credit card fraud has happened based on transactions), planning and learning under uncertainty (e.g., to build AI systems that guide doctors in recommending medicines for patients or taxi drivers to “right"" places at the “right"" times to earn more revenue), multi-agent systems (e.g., to build next generation patrolling systems for critical infrastructure security), image processing (e.g. to build systems that track and/or recognize suspicious people) and natural language processing (e.g., to build chat bots that can automatically and intelligently interact with customers in different service industries).","['artificial', 'intelligence', 'artificial', 'intelligence', 'ai', 'application', 'search', 'probabilistic', 'graphical', 'model', 'planning', 'learning', 'uncertainty', 'multi', 'agent', 'system', 'image', 'processing', 'natural', 'language', 'processing']"
SMU,CS421,Principles of Machine Learning,"Machine Learning is one of the fundamental subjects in the field of Artificial Intelligence. Machine Learning is concerned with computer programs that automatically improve their performance through experience (e.g., learning to recognize image or speech, classify text documents, detect credit card frauds, or drive autonomous vehicles).  This course covers both fundamental theory and practical algorithms for machine learning from a variety of perspectives. It includes a range of topics, from supervised learning (such as classification and regression) to unsupervised learning (such as clustering), and from traditional (shallow) learning (such as support vector machine) to recent state-of-the-art deep learning methods. The course is intended to prepare students for basic understanding of machine learning fundamentals and equip students with capability of applied machine learning techniques for real applications.

Students are strongly encouraged to have proficiency in IS103 Computational Thinking prior to reading this course.

NOTE: While this is an introduction course, it is a technical course and it is highly recommended that students are proficient in programming, probabilities, statistics and linear algebra (e.g., CS103 Linear Algebra for Computing Applications, CS105 Statistical Thinking for Data Science, CS201 Data Structures and Algorithms and CS202 Design and Analysis of Algorithms).","['machine', 'learning', 'artificial', 'intelligence', 'machine', 'learning', 'machine', 'learning', 'supervised', 'learning', 'classification', 'regression', 'unsupervised', 'learning', 'clustering', 'traditional', 'shallow', 'support', 'vector', 'machine', 'deep', 'learning', 'machine', 'learning', 'machine', 'learning', 'computational', 'thinking', 'programming', 'probability', 'statistic', 'linear', 'algebra', 'linear', 'algebra', 'statistical', 'thinking', 'data', 'structure', 'algorithm', 'design', 'analysis', 'algorithm']"
SMU,DSA201,Statistical Inference for Data Science,"This course introduces the concepts of random sampling, statistical inference and sampling distribution.  Several computer intensive methods and nonparametric approach are also discussed. Topics include statistical inferences, maximum likelihood methods, consistency and efficiency, UMVUE, confidence intervals estimation, Neyman-Pearson lemma, likelihood ratio test, information criteria, goodness-of-fit, contingency tables, EM algorithm, bootstrap and Markov Chain Monte Carlo, etc.","['random', 'sampling', 'statistical', 'inference', 'sampling', 'distribution', 'computer', 'intensive', 'method', 'nonparametric', 'approach', 'statistical', 'inference', 'maximum', 'likelihood', 'method', 'consistency', 'efficiency', 'confidence', 'interval', 'estimation', 'neyman', 'pearson', 'lemma', 'likelihood', 'ratio', 'test', 'information', 'criterion', 'goodness', 'fit', 'contingency', 'table', 'em', 'algorithm', 'bootstrap', 'markov', 'chain', 'monte', 'carlo']"
SMU,DSA211,Statistical Learning with R,"This course will guide the students through the application of cutting-edge statistical methods to big data analysis by implementing R-programming.  The use of programming R is integrated into most topics of the course.  Topics include R-programming, Statistical Inference, Statistical Modelling, Linear Regression, Resampling Methods, Linear Model Selection and Regularization, Tree-based methods, Cluster Analysis etc.","['big', 'data', 'analysis', 'programming', 'programming', 'r', 'programming', 'statistical', 'inference', 'statistical', 'modelling', 'linear', 'regression', 'resampling', 'method', 'linear', 'model', 'selection', 'regularization', 'tree', 'based', 'method', 'cluster', 'analysis']"
SMU,DSA212,Data Analytics with R,"This course will guide students to retrieve and prepare data for visualisation. The course also introduces several state of the art data analysis approaches to handle various types of data by implementing R-programming. The use of programming R is integrated into most topics of the course. Topics include Data visualization, data wrangling, interactive data graphics, database querying using SQL, database administration, spatial data, network science, etc.","['retrieve', 'prepare', 'data', 'data', 'analysis', 'handle', 'various', 'type', 'data', 'programming', 'programming', 'r', 'data', 'visualization', 'data', 'wrangling', 'data', 'graphic', 'database', 'querying', 'sql', 'database', 'administration', 'spatial', 'data', 'network', 'science']"
SMU,DSA301,Time Series Data Analytics,"This course covers predictive models, including stationary and non-stationary autoregressive moving average models, vector autoregressions, and vector error correction models with applications to Singapore data.  It also covers important ideas in forecasting, such as loss functions, forecast uncertainty, and forecast evaluation.","['predictive', 'model', 'stationary', 'non', 'stationary', 'autoregressive', 'moving', 'average', 'model', 'vector', 'vector', 'error', 'correction', 'model', 'forecasting', 'loss', 'function', 'forecast', 'uncertainty', 'forecast', 'evaluation']"
SMU,DSA303,Spatial Data Analysis,"This course introduces statistical concepts and basic tools involved in modelling and analyzing spatial data: Data that are correlated in ‘space’, arising in regional and urban economics, epidemiology and public health, environmental science, ecology, biology, geology and other disciplines.  An outline is given to the three types of spatial data: geostatistical data, lattice data and point patterns.  Emphasis is on the analysis of lattice data due to its close ties with regional science and economics.  Exploratory spatial data analysis methods, including various plots and tests for spatial autocorrelation, are introduced. Some standard spatial linear regression models and spatial panel data models are also discussed. Quasi-maximum likelihood and GMM methods are used for model estimation and inferences.  Real data analyses using R are presented throughout the course.","['modelling', 'analyzing', 'spatial', 'data', 'spatial', 'data', 'geostatistical', 'data', 'lattice', 'data', 'point', 'pattern', 'lattice', 'data', 'exploratory', 'spatial', 'data', 'analysis', 'method', 'spatial', 'autocorrelation', 'spatial', 'linear', 'regression', 'model', 'spatial', 'panel', 'data', 'model', 'quasi', 'maximum', 'likelihood', 'gmm', 'method', 'model', 'estimation', 'inference', 'data', 'analysis', 'r']"
SMU,DSA306,Big Data Analytics,"The rapid computerization of every aspect of life resulted in big data possessing the following features: volume, variety, velocity, and veracity (the 4Vs). Big data can be structured, unstructured or semi-structured, and the sources of big data are typically through social networks, media, and data warehouses. This course begins with a brief introduction to the Big Data world. It then introduces the current state of Big Data processing using the R programming language and its powerful statistical capabilities. It introduces the core methods for big data analysis including data mining and machine learning.","['following', 'volume', 'variety', 'velocity', 'veracity', 'big', 'data', 'big', 'data', 'medium', 'data', 'warehouse', 'big', 'data', 'r', 'programming', 'language', 'big', 'data', 'analysis', 'data', 'mining', 'machine', 'learning']"
SMU,ECON233,Economic Forecasting,"This course covers elementary econometric forecasting methods: stationary and non-stationary autoregressive moving average models, vector autoregressions, and vector error correction models, for macroeconomic forecasting, and autoregressive conditional heteroskedasticity models, for volatility forecasting in macroeconomics and finance. These models are applied primarily to Singapore data, culminating in an example of vector error correction models for forecasting Singapore GDP and inflation, and an autoregressive conditional heteroskedasticity model for a Singapore stock market index. This course will also cover forecast uncertainty, and forecast evaluation. If time permits we may cover additional topics such as model stability, structural change, and Kalman filtering.","['econometric', 'forecasting', 'method', 'stationary', 'non', 'stationary', 'autoregressive', 'moving', 'average', 'model', 'vector', 'vector', 'error', 'correction', 'model', 'macroeconomic', 'forecasting', 'autoregressive', 'conditional', 'heteroskedasticity', 'model', 'volatility', 'forecasting', 'vector', 'error', 'correction', 'model', 'forecasting', 'autoregressive', 'conditional', 'heteroskedasticity', 'model', 'forecast', 'uncertainty', 'forecast', 'evaluation', 'model', 'stability', 'structural', 'change', 'kalman', 'filtering']"
SMU,ECON245,Applied Healthcare Analytics,This module is designed to equip students with quantitative skills needed for health care research. Students will be inculcated with the knowledge and nurtured in thinking that yields the ability to undertake robust scientific enquiry using health data. A feature of this course is the weekly workshops that give students hands-on experience in solving a wide variety of problems using health data of various kinds. Workshop examples will be demonstrated using the statistical package R (freely available on https://cran.r-project.org/). A background in R is welcomed but not a necessary prerequisite.,"['health', 'data', 'statistical', 'package', 'r', 'r']"
SMU,IS105,Business Data Management,"This course will cover the fundamentals of relational database theory, important data management concepts such as data modelling, database design, database implementation and searches in unstructured data (i.e., text) in current business information systems for non-SCIS students.

Students are expected to apply knowledge learned in the classroom to solve many problems based upon real-life business scenarios, while gaining hands-on experiences in designing, implementing, and managing database systems.","['relational', 'database', 'theory', 'data', 'management', 'concept', 'data', 'modelling', 'database', 'design', 'database', 'implementation', 'search', 'unstructured', 'data', 'database', 'system']"
SMU,IS112,Data Management,"This course will cover fundamentals of relational database theory, important data management concepts such as data modelling, database design, database implementation in current business information systems, and some basic concepts related to unstructured data.

A series of in-class exercises, tests, pop quizzes and a course project will help students understand the covered topics. Students are expected to apply knowledge learned in the classroom to solve many problems based on real-life business scenarios, while gaining hands-on experience in designing, implementing, and managing database systems. Students are also expected to understand the differences between structured data and unstructured data.

This course is applicable to students declaring a major from SIS.","['relational', 'database', 'theory', 'data', 'management', 'concept', 'data', 'modelling', 'database', 'design', 'database', 'implementation', 'database', 'system']"
SMU,IS1702,Computational Thinking,"Computational Thinking equips students to tackle complex computational problems; it trains students to design solutions to solve those problems using a computer program.  It draws upon concepts from mathematics and computer science – more precisely, discrete mathematics, data structures and algorithm design.

This course will hone students’ analytical skills as they are challenged to think abstractly and computationally. Their minds will be open to the wonders of computing, as they go behind the scene to unravel the fundamental analytics that empower Google, consulting agencies and service companies.

NOTE: To facilitate learning in this course, you are required to know and use programming.  You are advised to pick up the Python programming language before the course, for instance by practising with online tutorials such as http://learnpython.org.

By taking this course, students will:
• discover the science of computing
• model problems and learn practical problem-solving techniques to tackle complex computational problems (beyond what a spreadsheet is capable of solving)
• apply problem-solving techniques to develop more elegant and efficient programs
• learn to write programs to represent and manipulate with complex data objects
• understand the challenge of scale, not only in dealing with large data sets, but also in appreciating the nature of computing and computability","['mathematics', 'computer', 'science', 'discrete', 'mathematics', 'data', 'structure', 'algorithm', 'design', 'analytical', 'python', 'spreadsheet']"
SMU,IS415,Geospatial Analytics and Applications,"In this globalising and competitive business environment, the value of location as a business measure is fast becoming an important consideration for organisation.  GIS with its capability to capture, manage, display, and analyse business information spatially is emerging as a location intelligence tool.

Today, many kinds of industries are employing GIS as an integral part of their business processes.  Examples of the use of GIS in business are:
• Market Analysis
Which is the company’s market share in different geographical areas?  Where are the customers located?  What are the characteristics of customers in different geographical locations?  Are there potential customers and where do they live? 
• Site Selection
Where are the shops or branches of the company located today?  Where are the competitors located?  What would be the surrounding market area for a new location?  What are the socio-economic characteristics of the people living in this market area?  Will the establishment of a new shop interfere with the existing shop owned by the company?  Are the land prices in different areas suitable for building a new shop?
• Sales territories
Which the company’s present division into sales territories?  What kind of customers live in these districts and how much is sold?  Is there a need for more salesmen in any district?  Could redistricting lead to more efficient sales organisation and less travelling time for the salesmen?
• Distribution and travel costs
How can the distribution system be made more efficient?  In what way does the transport system influence the distribution and how does it restrict or facilitate expansion in the region?  Can the number of journeys made by company staff be reduced by applying route planning software?  Are there any alternatives to our present distribution system?
• Analysis of the global environment and new export markets
What is the general economic and spatial pattern in the region?  How good is the infrastructure?  How is the population distributed geographically?  Which other companies are present in the region and where are they located?  Is this region a potential export market for the company’s products?

This course provides students with an introduction to practical applications of GIS in business operations. Emphasis will be placed on (i) locating, acquiring and integrating business data into GIS, (ii) understand the principles and methodologies of the geocoding process, (iii) become familiar with geovisualisation, spatial analysis and location modelling techniques, and (iv) explore the technologies and possibilities of server-based and/or web-based GIS analysis for Business Intelligence.","['gi', 'analysis', 'gi', 'gi', 'spatial', 'analysis', 'location', 'modelling', 'technique']"
SMU,IS417,Data Warehousing and Business Analytics,"*Our objectives are to provide you with broad coverage and examples about data warehouse techniques, trends underlying current and future development, and basic strategies for the use of DW/BI systems. Specifically, through this course, you will:

Gain an understanding of basic data warehousing applications and techniques, how data warehousing enables business intelligence capabilities that are used across different industries
Learn how to combine and consolidate data from the various databases scattered throughout a company into a data warehouse
Learn how data inside a data warehouse is organised into a “data cube”, which is extensively used in large scale business information analysis and mining
Explore how to use the “data cube” to do business analytics and reporting. This includes how to “slice and dice” the data to get different views of the information; how to aggregate and disaggregate the data to see the information with varying degrees of resolution; and how to do important types of business analytics and related reports
Acquire hands-on experience with key components of an integrated data warehousing and business intelligence system using a leading industry commercial application package
Use DW/BI applications to create enterprise business intelligence and analytics applications for solving real world problems
Study best practices and case studies for using data warehousing applications, data warehousing enterprise platforms, and integrated DW/BI applications
Gain highly desired IT and business analytic skills for using data warehousing to create business intelligence solutions to meet real world needs","['dw', 'bi', 'system', 'data', 'warehousing', 'business', 'intelligence', 'data', 'warehouse', 'learn', 'data', 'warehouse', 'data', 'cube', 'data', 'cube', 'business', 'analytics', 'business', 'analytics', 'data', 'warehousing', 'business', 'intelligence', 'dw', 'bi', 'application', 'business', 'intelligence', 'data', 'warehousing', 'data', 'warehousing', 'dw', 'bi', 'application', 'business', 'analytic', 'data', 'warehousing', 'business', 'intelligence']"
SMU,IS424,Data Mining and Business Analytics,"Data mining consists of a wide range of data analysis techniques that can be applied to large datasets to discover patterns, trends and other forms of knowledge embedded in the data.  In the commercial world, data mining is often conducted on enterprise data stored in relational databases to help managers make informed decisions so as to keep businesses competitive and attuned to changing market conditions. With the recent advances in data generation and collection, new data types such as text, web, spatial, and temporal data have emerged creating new opportunities for mining knowledge from data for business intelligence.

This course provides an introduction to the fundamental issues and basic techniques of data mining.  The topics covered include data mining process, data preprocessing, data mining techniques and data mining evaluation.  In particular, the use of data mining in support to business intelligence and decision making will be covered through labs, projects and case studies.

Students are expected to learn data mining and its use in business intelligence through acquiring the basic data mining concepts and techniques, using them to explore data, and deriving useful knowledge patterns from the data through hands-on programming and experimentation that involve some industry strength data mining software packages.","['data', 'mining', 'data', 'analysis', 'data', 'mining', 'relational', 'database', 'business', 'intelligence', 'data', 'mining', 'data', 'mining', 'process', 'data', 'preprocessing', 'data', 'mining', 'technique', 'data', 'mining', 'evaluation', 'business', 'intelligence', 'data', 'mining', 'business', 'intelligence', 'data', 'mining', 'programming', 'data', 'mining']"
SMU,IS428,Visual Analytics for Business Intelligence,"*Upon successful completion of the course, students will be able to:

Understand the basic concepts, theories and methodologies of Visual Analytics.
Analyse data using appropriate visual thinking and visual analytics techniques
Present data using appropriate visual communication and graphical methods.
Design and implement cutting-edge Visual Analytics system for supporting decision making","['visual', 'analytics', 'visual', 'thinking', 'visual', 'analytics', 'visual', 'communication', 'graphical', 'method', 'visual', 'analytics']"
SMU,IS460,Machine Learning & Applications,"Machine Learning is one of the fundamental subjects in the field of Artificial Intelligence. Machine Learning is concerned with computer programs that automatically improve their performance through experience (e.g., learning to recognize images or speech, classifying text documents, detecting credit card frauds, or driving autonomous vehicles).  This course covers both fundamental theory, practical algorithms and the applications for machine learning from a variety of perspectives. It includes a range of topics, from supervised learning (such as Naïve Bayes Classifier, Linear Regression, Logistic Regression, and Neural Networks) and their applications, to unsupervised learning (such as Principal Component Analysis (PCA) and Singular Value Decomposition (SVD)) and their applications, and from traditional (shallow) learning (such as Support Vector Machine (SVM)) to recent state-of-the-art deep learning methods (such as Recurrent Neural Networks (RNN) and Convolutional Neural Network (CNN)). The course is intended to prepare students for basic understanding of machine learning fundamentals and equip students with the capability to apply machine learning techniques through real world business applications (to solve real world problems).
NOTE: This is an algorithm and technical course, and it is highly recommended that students are proficient in programming, probabilities, statistics, linear algebra and calculus. Solid math background will be very useful and helpful for your learning journey. It is highly recommended that students have taken IS424 Data Mining and Business Analytics first if you do not have such math background knowledge. Having taken IS424 first will make this difficult course, Machine Learning & Applications, easier.","['machine', 'learning', 'artificial', 'intelligence', 'machine', 'learning', 'machine', 'learning', 'supervised', 'learning', 'na', 'bayes', 'classifier', 'linear', 'regression', 'logistic', 'regression', 'neural', 'network', 'unsupervised', 'learning', 'principal', 'component', 'analysis', 'pca', 'singular', 'value', 'decomposition', 'svd', 'traditional', 'shallow', 'support', 'vector', 'machine', 'svm', 'deep', 'learning', 'recurrent', 'neural', 'network', 'rnn', 'convolutional', 'neural', 'network', 'cnn', 'machine', 'learning', 'machine', 'learning', 'programming', 'probability', 'statistic', 'linear', 'algebra', 'calculus', 'math', 'data', 'mining', 'business', 'analytics', 'machine', 'learning']"
SMU,MKTG228,Marketing Analytics,"The field of marketing is becoming increasingly data-oriented with firms building and growing their marketing analytics capabilities. This course provides you with the fundamental skills and tools to understand, process, analyze, and report marketing data and insights, all with the aim to improve marketing decision making. You will learn how to code in a programming language and how to use data visualization software. This is a hands-on course that will prepare you for jobs in marketing analytics, marketing technology, marketing intelligence, and data science.","['marketing', 'analytics', 'programming', 'data', 'visualization', 'marketing', 'analytics', 'marketing', 'technology', 'marketing', 'intelligence', 'data', 'science']"
SMU,OPIM326,Service and Operations Analytics,"The increasing availability of data is changing the way organizations are thinking about themselves and the way they interact with the world. Data is helping improve the profits of businesses, the quality of life of individuals, the performance of sports teams, and social interactions. In this course you will learn how to use data and analytics to improve the service and operations of the organisations. The course will expose students to real world examples of how analytics is being used from various domains in managing operations and service delivery, e.g., product quality control, revenue management. Through these examples you will learn how to use tools of analytics such as linear regression, logistic regression, classification and regression trees, random forests, clustering, optimization, and visualization techniques in practice. The statistical software R will be used in the course, and class demo will be presented in R Notebooks. Students are encouraged to create their assignment and project reports using R Notebooks.","['product', 'quality', 'control', 'revenue', 'management', 'linear', 'regression', 'logistic', 'regression', 'classification', 'regression', 'tree', 'random', 'forest', 'clustering', 'optimization', 'visualization', 'technique', 'r', 'r', 'notebook', 'r', 'notebook']"
SMU,STAT201,Probability Theory and Applications,"This course is to develop knowledge of the fundamental probability theory for quantitatively assessing the uncertain events.  The focus in each teaching topic is on the applications of the probability concepts in everyday life.  But practical problems encountered in actuarial science and finance are particularly emphasized.  Topics include overview of probability, probability distributions, mathematical expectation, some special discrete distributions, some continuous distributions, functions of random variables, sampling distributions, jointly distributed random variables, Limit theorems and stochastic process.","['theory', 'quantitatively', 'assessing', 'uncertain', 'event', 'probability', 'actuarial', 'science', 'finance', 'probability', 'probability', 'distribution', 'mathematical', 'expectation', 'discrete', 'distribution', 'continuous', 'distribution', 'random', 'variable', 'sampling', 'distribution', 'jointly', 'distributed', 'random', 'variable', 'limit', 'theorem', 'stochastic', 'process']"
SUSS,ACC202,Financial and Managerial Accounting,ACC202 Financial and Managerial Accounting is an introductory course in financial and managerial accounting. It provides an understanding of fundamental concepts used in accounting and their role in business. Students will learn the basic knowledge and skills to analyse and apply accounting information to support decision making.,"['financial', 'managerial', 'accounting', 'financial', 'managerial', 'accounting', 'accounting']"
SUSS,ANL201,Data Visualisation for Business,"ANL201 Data Visualisation for Business is designed to equip students with knowledge and skills to use data visualisation in measuring and monitoring business performance. Firstly, students acquire knowledge of the business performance measurement framework and visualisation techniques. Secondly, they learn various stages of data management - data cleaning, exploratory analysis and data treatment. Finally, they learn how to combine the first two to create an effective, aesthetic and interpretable graphical representation of business performance - a business performance dashboard using data visualisation package. Through this course, students will learn to use data to make more informed decisions through effective visualisation and communication of the story hidden in the data. They will also acquire software skills for day-to-day work that will help them pursue career growth.","['data', 'visualisation', 'business', 'measuring', 'visualisation', 'technique', 'data', 'management', 'data', 'cleaning', 'exploratory', 'analysis', 'data', 'treatment', 'create', 'effective', 'data', 'visualisation', 'package', 'effective', 'visualisation', 'communication', 'story', 'hidden', 'software', 'skill']"
SUSS,ANL252,Python for Data Analytics,"ANL252 Python for Data Analytics, as part of the Business Analytics programme, is designed to equip Business Analytics students with the skills and knowledge to use the Python programming language as a tool for data analytics tasks. At the end of this course, students will be competent in writing Python codes to manage and manipulate data, and performing visualisation and data analytics techniques using existing, accessible Python libraries. Since this course is designed to help students with little prior exposure to programming, it will focus on breadth rather than depth.","['python', 'business', 'analytics', 'python', 'python', 'code', 'visualisation', 'data', 'analytics', 'accessible', 'python', 'library', 'programming']"
SUSS,ANL303,Fundamentals of Data Mining,"Fundamentals of Data Mining (ANL303) introduces students to the process and applications of data mining. Students will learn to appraise possible data mining solutions to address different types of business problems. Apart from learning to explore and prepare data for mining, they will be equipped with the basic skills and knowledge in constructing, interpreting, and evaluating data mining results or models. They will also be exposed to applying data analytics using a suite of tools including cloud services.","['data', 'mining', 'process', 'application', 'data', 'mining', 'possible', 'data', 'mining', 'prepare', 'data', 'basic', 'skill', 'knowledge', 'constructing', 'data', 'mining', 'result', 'data', 'analytics', 'cloud', 'service']"
SUSS,ANL305,Association and Clustering,"ANL305 Association and Clustering equips students with the skills and knowledge in applying Association Rule Mining, Clustering, as well as related unsupervised learning techniques. The course covers general approaches to developing analytics solutions when confronted with real-world problems. Students will learn how to address the problems using the techniques taught in this course. Last but not least, students will also be exposed to applying unsupervised data exploration and analysis using cloud services.","['association', 'clustering', 'association', 'rule', 'mining', 'clustering', 'unsupervised', 'learning', 'data', 'exploration', 'analysis', 'cloud', 'service']"
SUSS,ANL307,Predictive Modelling,"ANL307 Predictive Modelling aims to equip students with the skills and knowledge in developing predictive models to solve business problems. The course covers important concepts (such as issues in model construction, evaluation, selection and deployment) that underpin the proper development of useful models. Last but not least, the course also covers applications of predictive modelling using cloud services.","['predictive', 'modelling', 'model', 'construction', 'evaluation', 'deployment', 'predictive', 'modelling', 'cloud', 'service']"
SUSS,ANL310,Business Analytics Applications and Issues,"ANL310 Business Analytics Applications and Issues aims to equip students with the knowledge of various applications of business analytics in different industries. The course covers data mining applications used specifically in various industries, including fault detection in manufacturing sector, cross-selling and up-selling for service providers (for e.g., telecommunication) and customer loyalty, retention and churn in the retail sector. Towards the end of the course, issues in deployment of data mining models are also discussed.","['business', 'analytics', 'application', 'issue', 'business', 'analytics', 'data', 'mining', 'cross', 'selling', 'selling', 'deployment', 'data', 'mining', 'model']"
SUSS,ANL312,Text Mining and Applied Project Formulation,ANL312 Text Mining and Applied Project Formulation covers Text Mining as well as topics related to the formulation of the Applied Project such as Applied Project Research and report writing. The aim of this course is to broaden students' exposure to the breadth and depth of text mining and its applications and also to enable the students to carry out a prototype of the Applied Project so that they are more prepared for the Applied Project. Specific software will be used intensively in the course to provide hands-on applications of the topics covered.,"['text', 'mining', 'applied', 'project', 'formulation', 'text', 'mining', 'report', 'writing', 'text', 'mining']"
SUSS,ANL488,Business Analytics Applied Project,"With this project, students will apply the techniques and skills they acquired to individually assigned problems. Students will identify appropriate projects in which data mining techniques will be applied to provide useful information to make decisions.","['data', 'mining']"
SUSS,BUS105,Statistics,"This course provides students with an understanding of statistical concepts and techniques to generate information for decision-making. The course covers descriptive statistics, probability distributions, sampling distribution, interval estimation, hypothesis testing, ANOVA and regression. Emphasis will be placed on acquiring the analytical and interpretative skills needed to understand statistical findings.","['statistical', 'concept', 'technique', 'statistic', 'probability', 'distribution', 'sampling', 'distribution', 'interval', 'estimation', 'hypothesis', 'testing', 'anova', 'regression', 'analytical', 'skill']"
SUSS,FIN203,Essentials of Financial Management,"A business graduate needs to understand the essentials of finance so that he/she will be able to interact effectively with the finance and other functions in the organisation pertaining to financial matters. FIN203 Essentials of Financial Management aims to equip business graduates with the requisite knowledge and skills relating to finance concepts and models to understand the implications of the firm’s activities on its finances. A broad range of topics, covering financial statements, cash flows, valuation, time value of money, risk and return, cost of capital, capital structure, investment and financial planning is covered. Such knowledge and skills would be highly useful for those aspiring to start their own business or those who work in smaller firms that do not employ finance specialists.","['finance', 'finance', 'essential', 'financial', 'management', 'finance', 'financial', 'statement', 'cash', 'flow', 'valuation', 'time', 'value', 'money', 'risk', 'return', 'cost', 'capital', 'capital', 'structure', 'investment', 'financial', 'planning']"
SUSS,MKT202e,Marketing Management,"MKT202 Marketing Management is designed to introduce functions of the marketing department and the importance of marketing for modern organisations. In this course, students will learn classic marketing theories that remain relevant as well as contemporary marketing practices focusing on technology and digital marketing. This course also aims to build students’ knowledge and skills in the managerial aspects of marketing, including the development and execution of marketing plans and programmes.","['marketing', 'management', 'marketing', 'marketing', 'marketing', 'theory', 'technology', 'digital', 'marketing', 'development', 'execution', 'marketing', 'plan', 'programme']"
SUSS,ACC353,Accounting Analytics,"ACC353 Accounting Analytics covers the application of data analytical methods and tools to assist accounting professionals in their analysis of accounting and other data. The course will equip the students with skills to integrate analytical methods with management and accounting knowledge. It will also enable them to understand Big Data and how it impacts accounting and business processes. The course will focus on analytics techniques for decision making and examining data in financial accounting, management accounting and auditing functions. Students will learn the basic knowledge and skills in selecting and applying software tools used in data analytics for accounting and related work.","['accounting', 'analytics', 'data', 'analytical', 'method', 'assist', 'accounting', 'analysis', 'accounting', 'analytical', 'method', 'management', 'accounting', 'knowledge', 'impact', 'accounting', 'business', 'process', 'examining', 'data', 'financial', 'accounting', 'management', 'accounting', 'auditing', 'function', 'selecting', 'data', 'analytics', 'accounting']"
SUSS,ANL317,Business Forecasting,"ANL317 Business Forecasting equips students with the skills and knowledge to use time-series modelling techniques to predict future trends and changes that can help businesses make proactive decisions. At the end of this course, students will be competent in executing the entire forecasting process − from preparing data, identifying specific patterns of a time series, to choosing an appropriate model that produces meaningful and actionable forecasting results.","['business', 'forecasting', 'time', 'series', 'modelling', 'forecasting', 'preparing', 'data', 'identifying', 'specific', 'pattern']"
SUSS,ANL321,Statistical Methods,"ANL321 Statistical Methods explores the mathematical foundation of statistical inference and approaches. It begins with an introduction to basic mathematics for statistics, and then, to random variables and probability, the formulation of estimators and their properties, and regression models and their different variations. Students will learn statistical design thinking towards the estimation and identification of causality. They will learn the various pitfalls in regressions and the formulation of appropriate regression solutions to address various business and policy challenges. Students are expected to have mathematical foundations in calculus and should have attained a good grade in an undergraduate Statistics module (e.g., BUS105) as this course assumes fundamental knowledge in Statistics.","['statistical', 'method', 'statistical', 'inference', 'mathematics', 'statistic', 'random', 'variable', 'probability', 'formulation', 'estimator', 'regression', 'model', 'statistical', 'design', 'thinking', 'estimation', 'identification', 'causality', 'regression', 'regression', 'calculus', 'statistic', 'statistic']"
SUSS,ANL351,SAS Programming and its Application,"ANL351 SAS Programming and its Application introduces the fundamentals of SAS programming. Topics include introducing the various component to the SAS Language, working with SAS and non-SAS datasets, preparing data, summarizing data, producing reports and producing reusable SAS code.","['sa', 'programming', 'application', 'sa', 'sa', 'sa', 'preparing', 'data', 'summarizing', 'data', 'producing', 'report', 'sa']"
SUSS,ANL355,Applied Operations Research,"ANL355 Applied Operations Research introduces students to the optimization process and covers techniques such as the Simplex Method, Network Simplex, integer programming, non-linear programming and dynamic programming. Case studies will be used extensively to help illustrate the various techniques covered. Hands-on using computer software (e.g., Excel, AMPL) will also be taught in this course.","['applied', 'operation', 'research', 'optimization', 'simplex', 'method', 'network', 'simplex', 'integer', 'programming', 'non', 'linear', 'programming', 'dynamic', 'programming', 'computer', 'software', 'excel']"
SUSS,BIS388,Independent Study,"Independent Study is a one-semester course in which a student will work on a selected academic 
endeavour with the direct supervision of an academic supervisor. The academic endeavour could be in 
any approved form, such as a short research project, short internship stint, an independent overseas 
study trip, and others. Any academic endeavour chosen by the student must first be approved by the 
School and supervised by the academic supervisor. The academic endeavour can be proposed by either 
the student or School. Students will need to have their proposals approved by the School prior to the 
start of the semester in which the enrolled course commences.
The course will be assessed by various forms as deemed suitable for the type of academic endeavour 
embarked upon. The assessment will consist of an OCAS component (40% of total course marks) as 
well as an OES component (60% of total course marks). The student will need to obtain at least 40% in 
each component to pass the course",[]
SUSS,BME363,Applications of Artificial Intelligence in Healthcare,"BME363 introduces the concept of artificial intelligence through data analytics, which can be used to analyse large amount of data, in order to provide useful information for decision-making. In the context of healthcare, large amounts of data such as electronic health records (EHRs) and “omics” data have become available through various stakeholders of the healthcare industry (payers, providers, pharmaceuticals). These data can be used to derive insights for improving medical care, disease staging and therapy monitoring. This course involves the use of open-source Python software and related toolboxes for data processing and also highlights specific biomedical applications in the field of bioinformatics, personalised medicine, diagnostics and medical informatics.","['artificial', 'intelligence', 'data', 'analytics', 'python', 'data', 'processing', 'bioinformatics', 'medicine', 'diagnostics', 'medical', 'informatics']"
SUSS,BUS102,Management in the Digital Age,"BUS102 Management in the Digital Age is an introductory course in management theory and application. This course introduces the fundamental concepts and principles of business management and new developments in the industry to students. It provides students with knowledge of the four management functions – planning, organising, leading and controlling – in the light of the ever changing and turbulent business environment, especially when disruptive innovations are the norm. It addresses some key issues that are directly relevant to day-to-day business operations. This foundational knowledge base of management principles and concepts will enable students to enhance their own management capabilities and to understand contemporary issues in management, and what it takes to manage organisations in the digital era. This course also provides students with examples, applications and implications to the modern organisations.","['management', 'digital', 'age', 'business', 'management', 'planning', 'organising', 'leading', 'controlling', 'management']"
SUSS,BUS107,Quantitative Methods,"BUS107 Quantitative Methods introduces management science techniques and their potential applications in various business challenges. Students will learn and practise the use of quantitative methods for various purposes, such as linear programming for optimisation problems and simulation for estimating performance measures. This course will cover linear programming, forecasting, decision analysis, simulation, and network flow problems. In addition to manual methods, this course also presents software tools for performing computing tasks. At the end of the course, students will learn how to transform data into better decisions.","['quantitative', 'method', 'management', 'science', 'linear', 'programming', 'optimisation', 'simulation', 'linear', 'programming', 'forecasting', 'decision', 'analysis', 'simulation', 'network', 'flow']"
SUSS,BUS201,Contract and Agency Law,"BUS201 Contract & Agency Law introduces students to the key elements of contract and agency law and the role of contractual and agency relationships in business. In respect of contract law, the goal of the course is to demonstrate how contract law facilitates business transactions by being the “glue” which binds parties to perform their agreements. In respect of agency law, the goal is to show how legal rules shape the numerous agency relationships which are found within the Singapore business environment. Throughout the course, students will be exposed to relevant Singapore case law and legislation in order to highlight the practical application of these topics in business transactions","['contract', 'agency', 'law', 'contract', 'agency', 'law']"
SUSS,BUS352,Operations Analytics,"Improvements in data-collecting technologies have changed the way firms make informed and effective business decisions. BUS352 Operations Analytics focuses on the use of analytics, together with data, to analyse and solve operational problems in various business settings, and transform data into information to support decision making. In BUS352 Operations Analytics, students will gain a better understanding of the classic operations problems with data support, as well as learn to describe and present operational data in a meaningful and informative way. Students will also be exposed to analytics techniques and learn how to apply them to construct quantitative models, e.g., forecasting, optimisation and simulation models, to solve operational problems. Students will learn how to choose the best course of action in the face of uncertainty.","['effective', 'business', 'decision', 'operation', 'analytics', 'together', 'data', 'operation', 'analytics', 'data', 'support', 'describe', 'present', 'operational', 'data', 'construct', 'quantitative', 'model', 'forecasting', 'optimisation', 'simulation', 'model']"
SUSS,BUS353,Project Management,"BUS353 Project Management will provide both theoretical and practical insights on Project Management with the objective of providing a solid foundation for students to be knowledgeable on the subject, and become effective project team members and potentially project managers. This course covers topics such as request for proposal, proposal submission, risk assessment, project scheduling, resource allocation, cost estimation and budgeting. The roles and responsibilities of the project manager, project team and organization structures will also be covered.","['project', 'management', 'project', 'management', 'proposal', 'proposal', 'submission', 'risk', 'assessment', 'project', 'scheduling', 'resource', 'allocation', 'cost', 'estimation', 'budgeting']"
SUSS,BUS357,Starting and Managing a business,"BUS357 Starting and Managing a Business provides students with fundamental knowledge of entrepreneurship and its value to society, markets, and to individual entrepreneurs who innovate. The course provides an explanation of the entrepreneurial mindset and characteristics that drive success. It also provides tools to help entrepreneurs identify and act upon opportunities and able to swiftly pivot when required to. Students will get a first-hand experience of how it is like to build a start-up, from having an idea to validating it to pitching the idea to investors. Students will form groups to brainstorm business ideas and go through the process of validating and testing the idea and coming up with a prototype and eventually prepare a pitch for investors. The course would also discuss frameworks for (i) strategic, financial, legal, and business planning to start and develop a business, and (ii) exit strategy for the entrepreneur.","['starting', 'managing', 'business', 'mindset', 'characteristic', 'build', 'start', 'idea', 'validating', 'idea', 'investor', 'process', 'validating', 'testing', 'idea', 'coming', 'prototype', 'prepare', 'pitch', 'strategic', 'financial', 'legal', 'business', 'planning']"
SUSS,ECO202,Economic Ideas and Models for Business,"ECO202 Economic Ideas and Models for Business provides students with fundamental knowledge from economic methods that are applied to business. It is the science of decision making for allocating scarce resources in the management of a business or other organisation. The first part of the course covers the principles of microeconomics focusing on consumers’ and producers’ decision making for welfare and profit maximisation, respectively while the second part covers a few key principles of macroeconomics. The course covers the framework of demand and supply, market and efficiency, cost and production decision in an economy, game theories applied to business, information and externality, and a nation’s income, inflation and economic growth in the long run.","['economic', 'idea', 'model', 'business', 'consumer', 'producer', 'decision', 'making', 'market', 'efficiency', 'cost', 'game', 'theory', 'inflation']"
SUSS,ENG233,Internet of Things (IoT),"ENG233 Internet of Things (IoT) introduces the concepts of IoT and the underlying technologies. Students learn about the IoT architecture, system requirements, IoT system design, interfaces, communication protocols and data storage. This course introduces security issues in IoT systems and outlines measures to maintain the system security. Applications and case studies of IoT are discussed. Students will gain hands-on experience in designing IoT systems during the lab sessions using Raspberry pi or a suitable platform together with the relevant sensors. Students use the Electronics labs to prototype the IoT systems.","['internet', 'thing', 'iot', 'iot', 'iot', 'architecture', 'system', 'requirement', 'iot', 'system', 'design', 'interface', 'communication', 'protocol', 'data', 'storage', 'iot', 'system', 'system', 'security', 'iot', 'iot', 'system', 'pi', 'iot', 'system']"
SUSS,ICT233,Data Programming,"This course introduces students to the language (that is, protocol) adopted in the communication between a web server and client (browser), called the HyperText Transport Protocol (HTTP). Students will learn to write a program to talk HTTP with web servers to download web pages from the World Wide Web (WWW). By understanding the format of the web pages in HyperText Markup Language (HTML), the information in the web pages can be extracted in the form of an object. Students then learn how to design traditional database and store the information of the objects using the Object-Relational Mapping (ORM) method. Students will also learn how to Create, Read, Update and Destroy (CRUD) records of a database system. A data structure, DataFrame, will be introduced so that CRUD operations on information can be performed through a programming language.","['hypertext', 'transport', 'protocol', 'http', 'write', 'program', 'http', 'hypertext', 'markup', 'language', 'html', 'design', 'traditional', 'database', 'object', 'relational', 'mapping', 'orm', 'create', 'read', 'update', 'destroy', 'crud', 'database', 'system', 'crud', 'programming', 'language']"
SUSS,ICT330,Database Management Systems,"ICT330 Database Management Systems introduces students to relational databases, data 
modelling and the theory of relations as applied to the representation of models of data. The 
aim of this course is to equip students with an understanding of database systems concepts and 
in particular, using and then designing both read-only and updateable relational databases. The 
data sublanguage SQL, covered in practical lab sessions using a database management system 
such as Oracle Database system, includes both SQL Data Definition Language (DDL) for the 
implementation of the physical database from the Logical Data Model and Data Manipulation 
Language (DML) for data manipulation and query. The implementation of database objects 
such as views, triggers and stored procedures using SQL procedural extensions to fulfill 
business requirements are also explored in practical lab sessions. The system administration of 
multi-user database systems will also be covered to address issues such as concurrency, 
database backup, recovery and security.","['database', 'management', 'system', 'relational', 'database', 'data', 'modelling', 'database', 'system', 'relational', 'database', 'sql', 'database', 'management', 'system', 'oracle', 'database', 'system', 'sql', 'data', 'definition', 'language', 'ddl', 'implementation', 'database', 'object', 'view', 'trigger', 'stored', 'procedure', 'sql', 'procedural', 'extension', 'database', 'system', 'concurrency', 'database', 'backup', 'recovery', 'security']"
SUSS,MKT365,Social Media Metrics & Analytics,"The objective of MKT365 Social Media Metrics & Analytics is to equip students with practical skills in acquiring and analysing data from social media with Python. Students will be exposed to the analytic methods that can be used to convert social media data to marketing insights. Students will be able to implement Python tools for data collection, gathering the information needed to get started with applications such as natural language processing (NLP), social network analysis, and data visualization. This course will allow students to learn how to access data from mainstream social networks such as Twitter and Facebook, and how to perform different types of analysis in order to extract useful insights from the raw data and to present the results to support decision making in digital marketing.","['social', 'medium', 'metric', 'analytics', 'acquiring', 'analysing', 'data', 'python', 'python', 'data', 'collection', 'natural', 'language', 'processing', 'nlp', 'social', 'network', 'analysis', 'data', 'visualization', 'decision', 'making', 'digital', 'marketing']"
SUSS,MKT371,Customer Insights and Analytics,"MKT371 Customer Insights and Analytics aims to develop competency in conducting quantitative marketing research. It equips students with practical knowledge and skills to collect survey data, conduct appropriate statistical analysis, as well as extracting insights for decision making.","['customer', 'insight', 'analytics', 'collect', 'survey', 'data', 'statistical', 'analysis']"
SUSS,MKT390,Marketing Research,"Marketing research is considered one of the key functions in marketing. The topics covered in this course include: the role and value of marketing research information, technology in the research process, designing the research project, sampling and its issues, scale measurements, and questionnaire design issues.","['marketing', 'research', 'marketing', 'marketing', 'research', 'sampling', 'scale', 'measurement', 'questionnaire', 'design']"
SUTD,10.014,Computational Thinking for Design,"An introductory programming course that combines programming both in the architectural design and computing contexts targeted at novice programmers. It will introduce students to programming and design computing skills that are essential for their studies in SUTD, regardless of their choice of major. Students will learn visual programming and python programming together with design concepts, and will apply these skills in related projects. Acquire conceptual knowledge and skills for visual and python programming Implement a working visual/textual program to generate variations of a 3‐dimensional model in accordance to a given geometric problem
Develop python programs that meet a set of specifications to solve computational problems.
Produce a physical artefact as the final outcome of a computational process for a design project.
Develop and deliver a written report on time that describes the results of the design project.","['programming', 'programming', 'architectural', 'design', 'programming', 'design', 'computing', 'visual', 'programming', 'python', 'programming', 'visual', 'python', 'programming', 'visual', 'textual', 'program', 'python', 'computational']"
SUTD,50.001,Information Systems & Programming,"This course is an introduction to the design and programming of information systems. Topics include object oriented programming, data structures, mobile system and programming, design pattern and use of software libraries. Sample applications include Internet of Things, Android app and data analytics. Identify and describe the requirements for an information system.
Use object-oriented methodology to produce a modular and testable design.
Work as part of a team to produce a working system on time. Apply the key concepts of Object Oriented Programming [exams].
Use inheritance, polymorphism, encapsulation and method overloading in designing software systems. [projects, homework, exams].
Identify classes, members of a class and the relationships among them needed for a specific problem [projects, homework, exams].
Implement and test basic algorithms and data structures [projects, homework, exams).
Apply basic principles of user-interface design [projects, homework].
Develop skills in systematic testing and debugging [projects].
Work together in a team [projects].","['design', 'programming', 'information', 'system', 'object', 'oriented', 'programming', 'data', 'structure', 'mobile', 'system', 'programming', 'design', 'pattern', 'use', 'software', 'library', 'internet', 'thing', 'android', 'app', 'data', 'analytics', 'object', 'oriented', 'methodology', 'produce', 'modular', 'object', 'oriented', 'programming', 'exam', 'inheritance', 'polymorphism', 'encapsulation', 'designing', 'software', 'system', 'exam', 'exam', 'test', 'basic', 'algorithm', 'data', 'structure', 'exam', 'user', 'interface', 'design', 'project', 'systematic', 'testing', 'debugging', 'project']"
SUTD,50.002,Computation Structures,"This course introduces architecture of digital systems, emphasising structural principles common to a wide range of technologies. Topics include Multilevel implementation strategies; definition of new primitives (e.g., gates, instructions, procedures, and processes) and their mechanisation using lower-level elements. Analysis of potential concurrency; precedence constraints and performance measures; pipelined and multidimensional systems; instruction set design issues; architectural support for contemporary software structures. State the role of abstraction in the design of large digital systems, and explain the major software and hardware abstractions in contemporary computer systems.
Design simple hardware systems based on a variety of digital abstractions such as ROMs, logic arrays and state machines.
Synthesize digital systems from a library of representative components and test the designs under simulation.
Describe the operation of a moderately complex digital system — a simple RISC-based computer — down to the gate level, and be able to specify, implement and debug its components.
Appreciate the technical skills necessary to be a capable digital systems engineer.
Explain the fundamentals of modern operating systems. Identify flaws and limitations in simple systems implemented using the static discipline.
Identify flaws and limitations in simple systems implemented using clocked registers with asynchronous inputs.
Identify flaws and limitations in simple systems implemented using semaphores for process synchronization.
Characterize the logic function of combinational devices using CMOS, ROM or PLA technologies.
Explain synthesis issues for combinational devices using CMOS, ROM or PLA technologies from their functional specification.
Explain synthsis of acyclic circuits from combinational components.
Calculate performance characteristics of acyclic circuits with combinational components.
Explain and calculate performance characteristics of single-clock sequential circuits.
Implement a simple RISC-based CPU architecture.
Explain the underlaying theory of memory hierarchy.
Implement a device handler using interrupt and SVC.
Implement a synchronization system for processes using semaphore.","['architecture', 'digital', 'system', 'structural', 'principle', 'multilevel', 'implementation', 'strategy', 'new', 'primitive', 'gate', 'instruction', 'procedure', 'process', 'analysis', 'potential', 'concurrency', 'precedence', 'constraint', 'performance', 'measure', 'pipelined', 'multidimensional', 'system', 'instruction', 'set', 'design', 'issue', 'architectural', 'support', 'contemporary', 'software', 'structure', 'simple', 'hardware', 'system', 'based', 'rom', 'logic', 'array', 'state', 'machine', 'synthesize', 'digital', 'system', 'test', 'design', 'simulation', 'operating', 'system', 'identify', 'flaw', 'limitation', 'simple', 'system', 'identify', 'flaw', 'limitation', 'simple', 'system', 'identify', 'flaw', 'limitation', 'simple', 'system', 'process', 'synchronization', 'combinational', 'device', 'cmos', 'rom', 'cmos', 'rom', 'calculate', 'performance', 'characteristic', 'acyclic', 'circuit', 'combinational', 'calculate', 'performance', 'characteristic', 'single', 'clock', 'sequential', 'circuit', 'theory', 'memory', 'hierarchy']"
SUTD,50.003,Elements of Software Construction,"This course is an introduction to the fundamental principles and techniques of software construction that have greatest impact on practice. Topics include capturing the essence of a problem by recognizing and inventing suitable abstractions; key paradigms, including basic concepts of software design and their expression using notations from Unified Modeling Language (UML); software testing, automated software test generation, automated software security testing via blackbox, greybox and whitebox fuzzing approaches, detection and removal of software code smells, software coding standards to avoid security loopholes, concurrent programming, including programming with threads and processes, understanding concurrency problems like deadlock and data race. This course includes exercises in software design, implementation, testing and reasoning. Design medium-scale software system from scratch: formulating and analyzing the problem to be solved; writing formal software requirements, exploring and formulating system designs; and using extensive and systematic testing and reasoning to ensure quality.
Apply key software engineering ideas, including invariants, decoupling, and data abstraction.
Apply key software engineering ideas, including software design, specification, abstraction, verification and correctness.
Apply widely used design concepts and notations (UML diagrams) and patterns in exploring and articulating problems and designs.
Learning effective techniques on ensuring quality of large-scale software systems.
Apply concepts of systematic software testing to discover bugs (including security vulnerabilities) in large-scale software systems.
Apply concepts to reason about the security loopholes in software systems.
Learning secure software coding standards.
Learning key concepts in developing concurrent programs.
Learning key concepts in reasoning and testing concurrent programs. Build medium-scale software prototype (LO 1-5).
Design solution to questions related to the requirement prior to software development. (LO1, LO2 and LO4).
Design blackbox, whitebox and diabolic software tests for validating software prototype. (LO6).
Design critical part of the software by reasoning about its security. (LO8).
Design small/medium-scale concurrent programs. (LO9).
Design techniques to reason about the correctness of the concurrent programs (LO10).
Design software prototype with the objective of its maintainability and security. (LO5, LO7).
Design sofware testing methodologies to automatically discover potential security vulnerabilities, such as program crashes (LO6).","['software', 'design', 'unified', 'modeling', 'language', 'uml', 'software', 'testing', 'automated', 'software', 'test', 'generation', 'automated', 'software', 'security', 'testing', 'blackbox', 'whitebox', 'approach', 'detection', 'removal', 'software', 'code', 'software', 'coding', 'standard', 'concurrent', 'programming', 'programming', 'thread', 'process', 'understanding', 'concurrency', 'problem', 'deadlock', 'data', 'race', 'software', 'design', 'implementation', 'testing', 'reasoning', 'design', 'medium', 'scale', 'software', 'system', 'scratch', 'formulating', 'analyzing', 'problem', 'solved', 'writing', 'formal', 'software', 'requirement', 'exploring', 'formulating', 'system', 'design', 'extensive', 'systematic', 'testing', 'reasoning', 'software', 'engineering', 'idea', 'invariant', 'decoupling', 'data', 'abstraction', 'software', 'engineering', 'idea', 'software', 'design', 'specification', 'abstraction', 'verification', 'correctness', 'uml', 'diagram', 'exploring', 'quality', 'large', 'scale', 'software', 'system', 'systematic', 'software', 'testing', 'security', 'vulnerability', 'large', 'scale', 'software', 'system', 'security', 'software', 'coding', 'standard', 'scale', 'software', 'prototype', 'lo', 'lo', 'blackbox', 'whitebox', 'software', 'test', 'validating', 'software', 'prototype', 'small', 'medium', 'scale', 'concurrent', 'program', 'design', 'software', 'prototype', 'automatically', 'discover', 'potential', 'security', 'vulnerability', 'program', 'crash']"
SUTD,50.004,Algorithms,"This course is an introduction to algorithms and algorithmic thinking. The course covers common algorithms, algorithmic paradigms, and data structures that can be used to solve computational problems. Emphasis is placed on understanding why algorithms work, and how to analyze the complexity of algorithms. Students will learn the underlying thought process on how to design their own algorithms, including how to use suitable data structures and techniques such as dynamic programming to design algorithms that are efficient. At the end of the term, students will be able to:

Analyze the running times of algorithms.
Demonstrate familiarity with major algorithms and data structures.
Use suitable data structures in algorithms to solve computational problems.
Identify major issues in the implementation of algorithms.
Solve algorithmic issues in the design of information systems.
Understand graphs as data structures, and implement graph traversals.
Apply Bellman-Ford algorithm and Dijkstra’s algorithm to compute shortest paths in graphs.
Design efficient algorithms using dynamic programming to solve computational problems.
Analyze NP-complete problems and apply polynomial-time reductions to problems. Compute the asymptotic complexity of algorithms.
Analyze and apply properties of data structures.
Design algorithms that build upon basic operations on data structures.
Apply and/or modify existing algorithms to solve computational problems.
Compute hash tables and perform re-hashing.
Implement graph-based algorithms on provided graphs.
Design efficient algorithms using dynamic programming.
Analyze NP-complete problems and apply polynomial-time reductions to problems.","['data', 'structure', 'analyze', 'complexity', 'algorithm', 'dynamic', 'programming', 'design', 'algorithm', 'data', 'structure', 'data', 'structure', 'compute', 'shortest', 'path', 'dynamic', 'programming', 'np', 'complete', 'problem', 'complexity', 'algorithm', 'data', 'structure', 'operation', 'data', 'structure', 'apply', 'modify', 'existing', 'algorithm', 'graph', 'based', 'algorithm', 'provided', 'graph', 'dynamic', 'programming', 'np', 'complete', 'problem']"
SUTD,50.005,Computer System Engineering,"Topics on the engineering of computing and networking systems: design challenges; techniques for controlling complexity; operating systems and networking systems: performance; strong modularity; client-server; naming; security and privacy, atomicity and coordination of concurrent activities; user and end-to-end applications. Case studies of working systems and readings from the current literature provide comparisons and contrasts. Students will complete two design/implementation projects. At the end of the term, students will be able to:

Explain sources of complexity in computer system design, e.g. incommensurate scaling and emergent properties.
Exploit systems design principles to cope with the complexity, e.g., modularity, hierarchy, layering, indirection.
Command software tools to measure performance and understand how actual computing and network systems work.
Explain the design and implementation of real-world computing and networking (i.e., Internet) systems, e.g., DNS, HTTP, OpenSSL.
Develop programming skills to develop OS and networking tools and software. Use software tools to understand, measure, and design modern computing systems.
Implement concurrent and network programs in Java.
Explain the conceptual underpinnings of modern computing system design; apply relevant principles and techniques in conceptual problem solving.","['engineering', 'computing', 'networking', 'system', 'operating', 'system', 'networking', 'system', 'user', 'end', 'end', 'application', 'source', 'complexity', 'computer', 'system', 'design', 'complexity', 'modularity', 'performance', 'design', 'implementation', 'real', 'world', 'computing', 'networking', 'internet', 'system', 'dns', 'http', 'programming', 'develop', 'o', 'networking', 'tool', 'software', 'system', 'design', 'conceptual', 'problem', 'solving']"
SUTD,50.007,Machine Learning,"Machine learning is the study of algorithms that improve their performance at some task with experience. In this course, students will learn how machine learning has led to many innovative real-world applications. The students will also gain an in-depth understanding of a broad range of machine learning algorithms from basic to state-of-the-art, such as: naïve Bayes, logistic regression, neural networks, clustering, probabilistic graphical models, reinforcement learning and SVMs. At the end of the term, students will be able to:

Recognize the characteristics of machine learning that make it useful to real-world problems.
Explain the basic underlying concepts for supervised discriminative and generative learning.
Explain the concepts of cross-validation and regularization, be able to use them for estimation of algorithm parameters.
Characterize machine learning algorithms as supervised, semi-supervised, and unsupervised.
Have heard of a few machine learning toolboxes.
Use support vector machines.
Use regularized regression algorithms.
Explain the concept behind neural networks for learning non-linear functions.
Apply unsupervised algorithms for clustering.
Explain the foundation of generative models.
Implement the inference and learning algorithms for the hidden Markov model.
Explain the learning algorithm for hidden Markov model with latent variables.
Explain algorithms for learning Bayesian networks.
Explain reinforcement learning algorithms. List useful real-world applications of machine learning.
Implement and apply machine learning algorithms.
Choose appropriate algorithms for a variety of problems.","['machine', 'learning', 'machine', 'learning', 'machine', 'learning', 'na', 'bayes', 'logistic', 'regression', 'neural', 'network', 'clustering', 'probabilistic', 'graphical', 'model', 'reinforcement', 'learning', 'svms', 'machine', 'learning', 'generative', 'learning', 'cross', 'validation', 'regularization', 'machine', 'learning', 'algorithm', 'semi', 'supervised', 'unsupervised', 'machine', 'learning', 'support', 'vector', 'machine', 'regularized', 'regression', 'algorithm', 'neural', 'network', 'learning', 'non', 'linear', 'function', 'inference', 'learning', 'algorithm', 'hidden', 'markov', 'model', 'hidden', 'markov', 'model', 'bayesian', 'network', 'explain', 'reinforcement', 'learning', 'algorithm', 'machine', 'learning', 'machine', 'learning']"
SUTD,40.319,Statistical and Machine Learning,"An agent is intelligent if it perceives its environment and takes actions that maximize its chances of successfully achieving its goals. In this course, we will study how to imbue machines with intelligence, focusing on foundational principles and mathematical theories of real-world modeling, problem solving and statistical learning. We will borrow strategies from biological intelligence such as neural networks and reinforcement learning. Students will learn powerful concepts from decision theory, information theory, generative models, deep learning, dimensionality reduction, expectation-maximization, time-series prediction, control theory and machine reasoning, and will exploit software tools for building intelligent systems. Acquire a basic understanding in the fundamental concepts and principles of machine learning; decision theory, information theory, model selection, time series prediction, machine reasoning
Understand and apply methods in supervised learning and generative models;
generalized linear models, kernel methods, graphical models
Understand and apply concepts in unsupervised learning and dimensionality reduction; autoencoders, matrix factorization, expectation-maximization, latent variables, mixture models
Understand and apply techniques in reinforcement learning; Kalman filters, Q-learning
Acquire a working knowledge of neural networks and backpropagation, and extend the techniques learnt to analyze standard deep learning models such as convolutional neural networks and recurrent neural networks Design suitable mathematical models for real-world problems.
Build intelligent systems by composing appropriate algorithms.
Critique the strengths and weaknesses of different solutions.","['foundational', 'principle', 'mathematical', 'theory', 'problem', 'solving', 'statistical', 'learning', 'neural', 'network', 'reinforcement', 'learning', 'decision', 'theory', 'information', 'theory', 'generative', 'model', 'deep', 'learning', 'dimensionality', 'reduction', 'expectation', 'maximization', 'time', 'series', 'prediction', 'control', 'theory', 'machine', 'reasoning', 'building', 'intelligent', 'system', 'machine', 'learning', 'decision', 'theory', 'information', 'theory', 'model', 'selection', 'time', 'series', 'prediction', 'machine', 'reasoning', 'supervised', 'learning', 'generative', 'model', 'generalized', 'linear', 'model', 'kernel', 'method', 'graphical', 'model', 'unsupervised', 'learning', 'dimensionality', 'reduction', 'matrix', 'factorization', 'expectation', 'maximization', 'latent', 'variable', 'mixture', 'model', 'reinforcement', 'learning', 'kalman', 'filter', 'q', 'learning', 'neural', 'network', 'backpropagation', 'extend', 'technique', 'analyze', 'standard', 'deep', 'learning', 'model', 'convolutional', 'neural', 'network', 'recurrent', 'neural', 'network', 'design', 'suitable', 'mathematical', 'model', 'build', 'intelligent', 'system']"
SUTD,50.038,Computational Data Science,"This course provides students the necessary background and experience in data science technology and concepts. Students will gain experience with tackling a complete data science project, from data gathering and preprocessing to data analysis through machine learning tools. Students will learn to apply fundamental concepts in machine learning to data storage and distributed processing as a foundation for their project. Be aware of the main goals of data science, its main application domains and current challenges.
Apply tools to build basic models for solving typical data analytics problems.
Visualise the structure of big data in order to uncover hidden patterns.
Design and implement distributed database systems for managing heterogeneous data.
Perform basic operations on a moderately complex distributed computation system, such as Spark.
Explain the fundamentals of statistical machine learning and deep learning.
Appreciate the technical skills necessary to be a capable data scientist. Identify important concepts and current challenges in data science.
Design feature representations for image, text and time series data.
Analyse data and build simple models in tools such as Weka, Python and Tableau.
Implement distributed computation model using Spark.
Evaluate the performance of different models using empirical benchmarks.
Mathematically explain common machine learning models such as SVMs, logistic regression systems and neutral networks.
Implement machine learning algorithms using software such as R, C++ and PyTorch.
Manage big data using Hadoop and MapReduce.","['data', 'science', 'data', 'science', 'data', 'gathering', 'preprocessing', 'data', 'analysis', 'machine', 'learning', 'machine', 'learning', 'data', 'storage', 'distributed', 'processing', 'data', 'science', 'data', 'analytics', 'big', 'data', 'hidden', 'pattern', 'moderately', 'complex', 'distributed', 'computation', 'system', 'spark', 'statistical', 'machine', 'learning', 'deep', 'learning', 'text', 'time', 'series', 'data', 'build', 'simple', 'model', 'weka', 'python', 'tableau', 'distributed', 'computation', 'model', 'spark', 'empirical', 'benchmark', 'machine', 'learning', 'model', 'svms', 'logistic', 'regression', 'system', 'neutral', 'network', 'machine', 'learning', 'r', 'c']"
SUTD,50.043,Database Systems,"Database systems manage data which is at the heart of modern computing applications. We are in the era of big data, in which data is generated from many sources, in high velocity and with great variety. This poses numerous challenges in using and improving database technologies. Big data systems designed to support analytics are maturing and are becoming increasingly important to many applications.

This course covers the fundamentals of traditional databases, such as Oracle and MySQL, and core ideas of recent big data systems. Students will learn important problems in data management that these systems are designed to solve. They will experience with building applications on top of traditional databases, namely SQLite, and state‐of‐the‐art big data platforms, namely MongoDB and Apache Spark. These systems will be running both locally and on the Amazon cloud (Amazon Web Service). The students will be able to determine for themselves the advantages and disadvantages of different systems. Design and implement a database application on top of a relational database management systems (RDBMS).
Identify major components of database and big data systems.
Estimate the costs of different database operations.
Explain how state‐of‐the‐art big data systems differ to one another.
Implement a cloud‐based big data application.
Explain how database and big data systems fit together in real‐world applications.
Use cloud‐based systems. Develop a database design for an application.
List and explain major components of database and big data systems.
Write complex SQL queries.
Estimate cost of different database operations.
Compare different classes of big data systems.
Write MapReduce and Spark jobs.
Explain how a database differs to a big data system.
Design, implement, and deploy database and big data systems on AWS.","['database', 'system', 'manage', 'data', 'big', 'data', 'high', 'velocity', 'great', 'variety', 'support', 'analytics', 'traditional', 'database', 'oracle', 'mysql', 'data', 'management', 'traditional', 'database', 'namely', 'state', 'art', 'big', 'data', 'platform', 'namely', 'mongodb', 'apache', 'spark', 'different', 'system', 'relational', 'database', 'management', 'system', 'database', 'big', 'data', 'system', 'database', 'operation', 'state', 'art', 'big', 'data', 'system', 'database', 'big', 'data', 'system', 'database', 'design', 'explain', 'major', 'component', 'database', 'big', 'data', 'system', 'write', 'complex', 'sql', 'query', 'database', 'operation', 'big', 'data', 'system', 'spark', 'job', 'database', 'differs', 'big', 'data', 'system']"
SUTD,50.035,Computer Vision,"This is an advanced undergraduate level course on the concepts, algorithms and system design in computer vision. The particular focus in this course is on the underlying computational/mathematical principles, and data-driven and neural networks (aka “deep learning”) approaches. The course introduces different computer vision tasks such as image/video classification, localization, detection, among others, and discusses different computational algorithms for these tasks, including recently proposed deep learning methods: convolutional neural networks (CNN), recurrent neural networks (RNN), long short-term memory (LSTM), Generative Adversarial Networks (GAN), etc. Students will learn to design, implement, train and debug their own systems and neural networks, and gain understanding of, and the skills to use, cutting-edge technologies in computer vision. A semester-long, 1-D design project requires students to design, implement, and train multi-million parameter neural networks to address real-world computer vision problems. List useful real-world applications of computer vision
Apply and design computer vision systems and algorithms
Evaluate appropriate computer vision algorithms for a variety of problems Design image convolution and filtering using OpenCV [LO 1,2]
Design image recognition system using data driven approach and linear classification [LO 2]
Design convolutional neural networks using TensorFlow [LO 2]
Develop the training of convolutional neural networks using back-propagation and stochastic gradient descent [LO 2]
Design image recognition system using convolutional neural networks [LO 1,2,3]
Develop the training of convolutional neural networks using GPU programming [LO 2]
Design convolutional neural networks using dropout and batch normalization [LO 2]
Design image segmentation systems using convolutional neural networks [LO 1,2,3]
Design object detection and localization systems using convolutional neural networks [LO 1,2,3]
Design video activity recognition systems using recurrent neural networks [LO 1,2,3]
Develop the training of LSTM using TensorFlow [LO 2]","['computer', 'vision', 'computational', 'mathematical', 'principle', 'neural', 'network', 'deep', 'learning', 'computer', 'vision', 'image', 'video', 'classification', 'localization', 'detection', 'deep', 'learning', 'convolutional', 'neural', 'network', 'cnn', 'recurrent', 'neural', 'network', 'rnn', 'long', 'short', 'term', 'memory', 'lstm', 'generative', 'adversarial', 'network', 'gan', 'design', 'implement', 'train', 'debug', 'system', 'neural', 'network', 'design', 'neural', 'network', 'computer', 'vision', 'computer', 'vision', 'design', 'computer', 'vision', 'system', 'computer', 'vision', 'image', 'recognition', 'convolutional', 'neural', 'network', 'tensorflow', 'lo', 'convolutional', 'neural', 'network', 'back', 'propagation', 'image', 'recognition', 'convolutional', 'neural', 'network', 'lo', 'convolutional', 'neural', 'network', 'gpu', 'programming', 'lo', 'convolutional', 'neural', 'network', 'dropout', 'batch', 'normalization', 'lo', 'design', 'image', 'segmentation', 'system', 'convolutional', 'neural', 'network', 'lo', 'design', 'object', 'detection', 'localization', 'system', 'convolutional', 'neural', 'network', 'lo', 'design', 'video', 'activity', 'recognition', 'system', 'recurrent', 'neural', 'network', 'lo', 'lstm', 'using']"
SUTD,50.039,Theory and Practice of Deep Learning,"The course goal is to familiarize students with deep learning for vision, text, reinforcement learning and multimodal combinations thereof. The meaning of deep learning for this course is the training and application of neural networks as prediction models for various setups of input and output modalities. The course will include coding a subset of approaches for vision (so to avoid overlap with computer vision), approaches for sequential data such as 1D‐CNNs, temporal causal networks and recurrent neural networks, multimodal approaches, attention models, explainable AI and generative adversarial neural nets. The coding will cover the whole chain from data loader to training to parameter tuning to performance evaluation. The course will also focus on important practical aspects which are required to make the training part of deep learning work on smaller datasets such as transfer learning, the various forms of data augmentation, different optimizers and learning rate tuning. By the end of the course, students will be able to

Explain the concept of ﴾discriminative﴿ learning from data, generalization and overfitting.
Be able to explain how the decision boundary of a linear neuron depends on its parameters in a general vector space.
Be able to explain what backpropagation is used for.
List for different prediction problems. Suitable outputs of predictors and suitable loss functions.
Explain the basic ideas behind convolutional and recurrent neural networks.
Be able to retell methods of data augmentation.
Be able to use deep learning toolboxes for loading data, training and performance evaluation of deep neural networks.
Construct data loaders for custom datasets of various types with various types of ground truth annotations, such as images, sequential data e.g. text and multi‐modal data.
Being able to set up neural networks for vision, and apply training algorithms to them and evaluate the performance of transfer learning tasks with two state of the art deep learning toolboxes.
Being able to set up neural networks for sequence classification, and apply training algorithms to them and evaluate the performance of transfer learning tasks with one state of the art deep learning toolboxes.
Be able to explain the functioning principle of a generative adversarial neural network. Evaluate deep learning models and loss functions by suitability based on the intended prediction outputs for several prediction task types (ad: LO suitable loss functions).
Compute the terms used in backpropagation for a given neural network topology (ad: LO backprop)
Sketch the set of points for which a linear unit has constant outputs, sketch the directions for which the function values change fastest for a linear unit (ad LO decision boundary of a linear unit).
For a given model and a layer give arguments when to use a fully connected and when to use convolutional layers.
for a given problem give arguments when to use feedforward and when to use recurrent neural networks ad LO convolutional NNs, recurrent NNs.
Create code for dataloaders for custom datasets with groundtruths for image and text data.
Create code for neural networks for vision, which loads data, applies training algorithms and evaluates the prediction performance with two state of the art deep learning toolboxes.
Create code for neural networks for sequence classification, which loads data, applies training algorithms and evaluates the prediction performance of transfer learning tasks with one state of the art deep learning toolbox.
Compute train and test loss curves from a training process and be able to examine the amount of overfitting when comparing different pairs of train/test loss curves (ad LO generalization and overfitting).
Employ data augmentation methods and transfer learning in code, evaluate their impact on performance (ad LO data augmentation).
Produce example code for a generative deep neural network, be able to give possible use cases for GANs (ad LO generative adversarial neural network).","['deep', 'learning', 'reinforcement', 'learning', 'multimodal', 'combination', 'deep', 'learning', 'neural', 'network', 'temporal', 'causal', 'network', 'recurrent', 'neural', 'network', 'multimodal', 'approach', 'attention', 'model', 'explainable', 'ai', 'generative', 'adversarial', 'neural', 'net', 'data', 'parameter', 'tuning', 'performance', 'evaluation', 'deep', 'learning', 'transfer', 'learning', 'data', 'augmentation', 'discriminative', 'learning', 'generalization', 'recurrent', 'neural', 'network', 'data', 'augmentation', 'deep', 'learning', 'loading', 'data', 'performance', 'evaluation', 'deep', 'neural', 'network', 'ground', 'truth', 'annotation', 'image', 'neural', 'network', 'transfer', 'learning', 'deep', 'learning', 'neural', 'network', 'sequence', 'classification', 'transfer', 'learning', 'deep', 'learning', 'neural', 'network', 'evaluate', 'deep', 'learning', 'model', 'loss', 'function', 'neural', 'network', 'point', 'change', 'fastest', 'recurrent', 'neural', 'network', 'convolutional', 'nns', 'recurrent', 'nns', 'code', 'neural', 'network', 'deep', 'learning', 'code', 'neural', 'network', 'sequence', 'classification', 'transfer', 'learning', 'deep', 'learning', 'toolbox', 'generalization', 'data', 'augmentation', 'method', 'transfer', 'learning', 'code', 'evaluate', 'impact', 'performance', 'data', 'augmentation', 'deep', 'neural', 'network', 'generative', 'adversarial', 'neural', 'network']"
SUTD,50.04,Natural Language Processing,"Natural Language Processing (NLP) is an important area within the general field of artificial Intelligence (AI). Modern NLP models focus on using machine learning algorithms for solving various text processing problems. This course covers fundamental topics within the domain of NLP, including part-of-speech tagging, word embeddings, chunking, syntactic parsing, semantic role labeling, semantic parsing, named entity recognition, sentiment analysis, generation, summarization and machine translation. Students will get a chance to learn fundamental algorithms as well as state-of-the-art, deep-learning based techniques for NLP and will get a chance to implement and play with advanced NLP algorithms and models. By the end of the course, students will be able to

Explain the fundamental tasks within NLP
Explain possible algorithms as solutions to NLP tasks
Implement the algorithms used for various NLP tasks
Design novel algorithms for solving new NLP tasks, and use existing NLP technologies for solving real problems Explain the major tasks within NLP that involve supervised structured prediction
Explain the major tasks within NLP that involve unsupervised learning
Apply the relevant models that need to be used for each task
Apply the major guiding principles when choosing a model for a specific task within NLP
Decide when to and when not to use neural network based or deep learning methods for a specific task within NLP
Design and implement fundamental algorithms used for various NLP tasks
Analyze the time complexity involved for a specific NLP algorithm
Evaluate the performance of an NLP model based on certain evaluation metrics on standard datasets","['natural', 'language', 'processing', 'nlp', 'artificial', 'intelligence', 'ai', 'machine', 'learning', 'algorithm', 'text', 'processing', 'nlp', 'part', 'speech', 'tagging', 'word', 'embeddings', 'chunking', 'syntactic', 'parsing', 'semantic', 'role', 'labeling', 'semantic', 'parsing', 'named', 'entity', 'recognition', 'sentiment', 'analysis', 'generation', 'machine', 'translation', 'deep', 'learning', 'based', 'nlp', 'nlp', 'algorithm', 'nlp', 'explain', 'possible', 'algorithm', 'nlp', 'task', 'implement', 'algorithm', 'design', 'novel', 'algorithm', 'nlp', 'task', 'unsupervised', 'learning', 'nlp', 'neural', 'network', 'based', 'deep', 'learning', 'nlp', 'design', 'implement', 'fundamental']"
SUTD,50.006,User Interface Design and Implementation,"The course will introduce the field of Human-Computer Interaction (HCI), Interaction Design and Usability in the context of today’s diverse interactive products. The course will cover usability principles, design guidelines and heuristics, user-centred design, usability engineering, user experience and evaluation techniques, and will include a series of mini design exercises and design-implementation projects. Students who successfully complete the course will be well-equipped with the concepts and language to argue and discuss how well a system’s front-end (e.g. a website, a mobile app, a museum kiosk, etc.) is designed and be able to design usable, easy-to-use, intuitive, attractive user-interfaces informed by the concepts and knowledge learned during the course. Understand the concept of usability, design principles, guidelines, heuristics and other fundamentals of Human-Computer Interaction.
Analyze a set of requirements in terms of its user-interface implications.
Develop a usage scenario for a given set of user requirements and available technologies.
Construct a user-interaction strategy for a given problem.
Sketch a series of user-interfaces for a given use scenario.
Implement a designed user-interface to demonstrate its functionality and usability.
Employ a set of usability engineering methods to refine a designed user-interface.
Evaluate a user-interface using suitable evaluation methodology. Apply design principles, guidelines and heuristics to create a user-interaction strategy that solves a real-world problem.
Design a usable and compelling user-interface given a set of requirements and available technologies.
Communicate effectively the designed user-interface to relevant stakeholders using design rationale and a sketching/presentation tool in an informed, reasonable and persuasive way.
Conduct an evaluation of a user-interface by employing a series of evaluation methods available in usability engineering.","['human', 'computer', 'interaction', 'hci', 'interaction', 'design', 'usability', 'usability', 'principle', 'design', 'guideline', 'heuristic', 'user', 'centred', 'design', 'usability', 'engineering', 'user', 'experience', 'evaluation', 'technique', 'usability', 'design', 'principle', 'guideline', 'heuristic', 'human', 'computer', 'interaction', 'user', 'requirement', 'available', 'technology', 'user', 'interface', 'given', 'use', 'scenario', 'usability', 'engineering', 'suitable', 'evaluation', 'methodology', 'guideline', 'heuristic', 'create', 'user', 'interaction', 'strategy', 'communicate', 'effectively', 'designed', 'user', 'interface', 'design', 'rationale', 'usability', 'engineering']"
SUTD,50.012,Networks,"This course will introduce the principles and practice of computer networking, with emphasis on the Internet. Students will learn concepts, principles, protocols, and applications of computer networks, including packet switching, layered architectures, TCP/IP, physical layer, error control, window flow control, local area networks (Ethernet, Token Ring; FDDI), network layer, congestion control, quality of service, multicast, network programming interfaces, networked applications. Explain fundamental network protocols.
Describe the organisation of computer networks, and classify factors influencing computer network development and the reasons for having variety of different types of networks.
Solve standard problems in interconnections between autonomous networks.
Model the Internet structure and derive operational parameters.
Design optimized network topology for given problem settings.
Analyze and evaluate a provided network setup.
Design and implement a server-client architecture based on sockets. Description of the essential features of different networking protocols, such as TCP, IP, DNS, and ARP.
Conceptual design of a computer network based on a set of provided operational requirements.
Application of routing algorithms to determine the shortest path in an network such as the internet, modeled as a weighted graph.
Model and analysis of a network of autonomous systems.
Analysis of a real network setup and critique of the design decisions.
Design and implementation of a client-server application program using sockets.","['principle', 'practice', 'computer', 'networking', 'computer', 'network', 'packet', 'switching', 'layered', 'architecture', 'tcp', 'ip', 'physical', 'layer', 'error', 'control', 'window', 'flow', 'control', 'local', 'area', 'network', 'ethernet', 'token', 'ring', 'network', 'layer', 'congestion', 'control', 'quality', 'service', 'multicast', 'network', 'programming', 'interface', 'networked', 'application', 'computer', 'network', 'classify', 'factor', 'computer', 'network', 'development', 'internet', 'evaluate', 'provided', 'network', 'tcp', 'ip', 'dns', 'arp', 'conceptual', 'design', 'internet']"
SUTD,50.017,Graphics and Visualisation,"Introduction to computer graphics algorithms, software and hardware. Topics include ray tracing, the graphics pipeline, transformations, texture mapping, shadows, sampling, global illumination, splines, animation, color, fundamentals of virtual and augmented reality (VR and AR).

In this course, we will concentrate on 3D, not 2D illustration or image processing. You will learn:

Fundamentals of computer graphics algorithms
Basics of real-time rendering and graphics hardware
Basic OpenGL
C/C++ programming experience
How to write efficient programs
Algorithms that can help in Machine Learning (e.g. KDTree) Understand the fundamentals of computer graphics algorithms

Implement graphics algorithms for a variety of applications: video games, movies, CAD, etc.
Understand the different requirements of different applications.
Understand the basics of real-time rendering and graphics hardware.
Use C/C++ and OpenGL programming to build 3D graphics applications Understand key topics related to computer graphics:

Coordinate transformations
Bezier curves and splines
Representation and interpolation of rotations
Computer animation
Particle systems
Collision detection
Ray Tracing
Rasterization and Shading
Texture mapping
Global illumination approaches","['computer', 'graphic', 'algorithm', 'ray', 'tracing', 'graphic', 'pipeline', 'transformation', 'texture', 'mapping', 'shadow', 'sampling', 'global', 'illumination', 'spline', 'animation', 'virtual', 'augmented', 'reality', 'computer', 'graphic', 'algorithm', 'graphic', 'hardware', 'basic', 'opengl', 'c', 'c', 'programming', 'machine', 'learning', 'computer', 'graphic', 'algorithm', 'graphic', 'algorithm', 'video', 'game', 'movie', 'graphic', 'hardware', 'c', 'c', 'opengl', 'programming', 'build', 'graphic', 'application', 'computer', 'graphic', 'computer', 'animation', 'particle', 'system', 'collision', 'detection', 'ray', 'tracing', 'rasterization', 'texture', 'mapping', 'global', 'illumination']"
SUTD,50.02,Network Security,"This course covers theory and practice of network security. Starting with general introduction of network security, this course focuses on Internet security. The first part addresses common security issues and countermeasures at each of the five layers from the TCP/IP protocol stack. Subsequently, Firewall and Intrusion Detection/ Prevention System are covered as two of the most common tools/technologies to protect a network. Finally, the course ends with special topics such as wireless network security, IoT security, etc. Explain common attacks and countermeasures in a networked system, particularly on the commonly used network protocols.
Model, analyse and apply effective countermeasures for secure networked systems.
Apply layered defense technologies to a secure network design.
Design and optimise network design for given problem settings.
Evaluate the security of an existing network design. By the end of the course, students will be able to:

Description of the fundamental concepts of network security, through proper threat modeling and security goal definition in a design project.
Application of security countermeasures to design a secure networked system.
Applications of security countermeasures to mitigate common attacks by demonstrating security level improvement of a vulnerable networked system.
Application of layered defense technologies/tools and practical considerations for securing a complex network in a design project.
Security assessment and optimisation of a given networked system through an experimental project.
Demonstration of common attacks fro common network protocols, through successful packet sniffing and editing in a laboratory environment.","['theory', 'practice', 'network', 'security', 'network', 'security', 'internet', 'security', 'tcp', 'ip', 'protocol', 'stack', 'firewall', 'intrusion', 'prevention', 'system', 'technology', 'protect', 'network', 'wireless', 'network', 'security', 'iot', 'security', 'attack', 'networked', 'system', 'network', 'protocol', 'security', 'network', 'design', 'network', 'security', 'threat', 'modeling', 'security', 'security', 'networked', 'system', 'security', 'countermeasure', 'layered', 'defense', 'technology', 'securing', 'complex', 'network', 'security', 'assessment', 'optimisation', 'network', 'protocol']"
SUTD,50.021,Artificial Intelligence,"Artificial intelligence (AI) is a rich field spanning formal systems for representing and processing symbolic information, computational models of human cognition, and a range of techniques for learning, planning and reasoning under uncertainty. In this course, students will gain an appreciation of what “artificial intelligence” means, and how it can be usefully applied to real-world problems. Students will learn the intricacies of state-space search and constraint programming. Through an in-depth treatment of knowledge representation via propositional and first-order logic, students will understand how expert knowledge can be fed into and be processed by modern computers. In addition, students will acquire skills in using planning algorithms to find solutions to optimization problems, and understand how to use probabilistic reasoning to draw inferences in uncertain environments. By the end of the course, students will be able to:

Define the meaning of “artificial intelligence”.
Name examples of AI that are successful in real-world problems.
Describe the strengths and limitations of various state-space search algorithms, and choose the appropriate algorithm for a problem.
Formulate and solve problems in the framework of constraint satisfaction problems.
Formulate and solve planning problems.
Use probabilistic modelling techniques to solve problems with noise, incomplete information, and uncertainty.
Summarize the essential components of gradient-based optimization in supervised learning problems
Explain the impact of stepsizes in gradient-based optimization
Recognize the difference between batch and stochastic/mini-batch gradient descent and apply improved weight update methods such as momentum term, RMSProp and Adam.
Be able to apply the training and running of trained neural networks in Pytorch
Be able to investigate the impact of essential parameters such as stepsize, batchsize and training iterations when training a neural network
Discuss the usage of different neural network structures such as fully connected, convolutional and pooling layers
Be able to recall state of the art neural network components such as batch normalization layers and residual connections
Be able to recall the basic ideas behind neural networks used for machine translation and sequence to sequence learning.
Be able to construct input samples that are able to fool neural networks
Explain the difference between training from scratch and finetuning, be able to run finetuning of neural networks. List current useful real-world applications of AI.
Implement state-space search algorithms for a variety of problems.
Solve constraint programming problems.
Infer new information from provided knowledge.
Use planning algorithms to find optimal solutions.
Solve problems with noise and uncertainty using probabilistic techniques.","['artificial', 'intelligence', 'ai', 'artificial', 'intelligence', 'optimization', 'problem', 'probabilistic', 'reasoning', 'artificial', 'intelligence', 'constraint', 'satisfaction', 'probabilistic', 'modelling', 'gradient', 'based', 'optimization', 'supervised', 'learning', 'stochastic', 'mini', 'batch', 'gradient', 'descent', 'apply', 'improved', 'weight', 'momentum', 'term', 'neural', 'network', 'stepsize', 'neural', 'network', 'neural', 'network', 'structure', 'convolutional', 'pooling', 'neural', 'network', 'batch', 'normalization', 'residual', 'connection', 'neural', 'network', 'machine', 'translation', 'sequence', 'learning', 'neural', 'network', 'neural', 'network', 'state', 'space', 'search', 'algorithm', 'probabilistic', 'technique']"
SUTD,50.033,Foundations of Game Design and Development,"This is an introductory course about the basic of game creation. This course provides an overview of different aspects of game development. Student will get in touch with C++ Programming (industry standard), starting with console application, then GUI games on various platform with graphics, dialog boxes, and user control. There are also basic overview of topics including game architecture, interface design, graphics for game, audio for game, prototyping and play testing. Students will be able to implement their creative gaming idea by using the latest gaming tools which are easy and readily usable. Have a board but general overview of different aspects of game development.
Understand the complete flow of game development in a high level perspective, be prepared to master the complete skill set of game development. Produce simple games with student’s novel idea by using existing tools.
Ability to use code libraries to quickly create runnable games.","['game', 'creation', 'game', 'development', 'c', 'programming', 'console', 'application', 'gui', 'game', 'game', 'architecture', 'interface', 'design', 'graphic', 'game', 'audio', 'game', 'prototyping', 'game', 'development', 'flow', 'game', 'development', 'skill', 'set', 'game', 'development']"
SUTD,50.037,Blockchain Technology,"Decentralized blockchain-based systems, such as Bitcoin and Ethereum, are successful beyond all expectations. Although still in their infancy, they promise to revolutionize how we think of financial, information, and other infrastructures. This course covers the technical aspects of public distributed ledgers, blockchain systems, cryptocurrencies, and smart contracts. Students will learn how these systems are built, how to interact with them, how to design and build secure distributed applications. By the end of the course, students will be able to

Understand how blockchain systems (mainly Bitcoin and Ethereum) work,
To securely interact with them,
Design, build, and deploy smart contracts and distributed applications,
Integrate ideas from blockchain technology into their own projects. Explain design principles of Bitcoin and Ethereum.
Explain Nakamoto consensus.
Explain the Simplified Payment Verification protocol.
List and describe differences between proof-of-work and proof-of-stake consensus.
Interact with a blockchain system by sending and reading transactions.
Design, build, and deploy a distributed application.
Evaluate security, privacy, and efficiency of a given blockchain system.","['decentralized', 'blockchain', 'based', 'system', 'public', 'distributed', 'ledger', 'blockchain', 'system', 'cryptocurrencies', 'smart', 'contract', 'design', 'build', 'secure', 'distributed', 'application', 'build', 'smart', 'contract', 'distributed', 'application', 'consensus', 'describe', 'difference', 'proof', 'work', 'proof', 'stake', 'consensus', 'build', 'distributed', 'application', 'evaluate', 'security']"
SUTD,50.041,Distributed Systems and Computing,"This course introduces fundamental concepts for designing and implementing large‐scale distributed systems. The course will not only focus on the design aspects of distributed systems, but will also focus on the fundamental principles to ensure the correctness in a distributed environment. We will apply the concepts via hands on assignments using GO programming language. The course will also deep dive into specific concepts of distributed systems e.g. designing distributed file systems (such as in Google File Systems) to accommodate arbitrarily many application‐level users. Finally, we will discuss concepts on recovering from faults (both normal and byzantine) in a distributed system. Design and implement a distributed system from scratch.
Apply key ideas to maintain the correctness in distributed systems.
Learning techniques to design and develop massively parallel systems using GO programming language.
Learning techniques to design and implement a distributed file system.
Learning and applying techniques to recover from faults in distributed systems. Build models of distributed systems [LO 1].
Prototype distributed software systems [LO 1,2,3,4,5].
Build distributed algorithms using industry-strength programming language [LO 3].
Build algorithms to analyse the correctness of distributed systems [LO 2].
Prototype software and systems to manage files and records in a distributed environment [LO 4].
Build algorithms to analyse and test possible faults in distributed systems [LO 1, 5].
Build techniques to recover from faults in distributed systems [LO 5].
Build techniques at the level of supervisory software to support distributed applications [LO 1,4,5].","['designing', 'implementing', 'large', 'scale', 'distributed', 'system', 'distributed', 'system', 'go', 'distributed', 'system', 'designing', 'distributed', 'file', 'system', 'google', 'file', 'system', 'distributed', 'system', 'distributed', 'system', 'scratch', 'distributed', 'system', 'design', 'develop', 'massively', 'parallel', 'system', 'go', 'design', 'implement', 'distributed', 'file', 'system', 'distributed', 'system', 'distributed', 'system', 'lo', 'distributed', 'software', 'system', 'lo', 'programming', 'language', 'analyse', 'correctness', 'distributed', 'system', 'lo', 'distributed', 'environment', 'lo', 'distributed', 'system', 'lo', 'distributed', 'system', 'lo', 'supervisory', 'software', 'support', 'distributed', 'application', 'lo']"
SUTD,50.042,Foundations of Cybersecurity,"This course provides students with a basic appreciation and understanding of the core concepts of information security. Topics to be covered include concepts for confidentiality, integrity and availability; introduction to cybercrimes and security issues; threats to information systems and devices; cryptographic primitives such as symmetric and asymmetric cryptography; core problems such as random number generation, entropy, and key distribution; and common topics such as security protocols and public‐key infrastructures. List basic security solutions and models; explain concepts for confidentiality, integrity and availability.
Apply protocols used for key establishment, encryption, and authentication to secure a system.
Apply known attacks to vulnerable cryptographic primitives.
Model, analyse, and apply cryptographic primitives used for encryption, secure hashing, and digital signatures.
Evaluate the security of existing system designs respect to different attacker models. Evaluate security models like CIA model (confidentiality, integrity, availability) by defining and assessing security level for an existing system in a design project
Perform attacks related to block ciphers in Electronic‐Codebook mode, through successful retrieval of partial or full information related to the plaintext or key used, and
show the outcome of the attacks.
Implement a scheme for pre‐image recovery of hashes through brute force and hybrid attacks for hash related password authentication systems.
Apply substitution ciphers, One‐time‐pads, and AES in real‐life applications to prevent sensitive data exposure and thus preserve the confidentiality of secret data.
Analyse network logs , based on that, implement potential attacks on schemes for encryption, authentication, key establishment and digital signatures, through a challenge design and solving project.","['integrity', 'availability', 'security', 'issue', 'cryptographic', 'primitive', 'symmetric', 'asymmetric', 'cryptography', 'random', 'number', 'generation', 'security', 'protocol', 'public', 'key', 'infrastructure', 'security', 'integrity', 'availability', 'encryption', 'secure', 'hashing', 'digital', 'signature', 'security', 'evaluate', 'security', 'model', 'cia', 'model', 'confidentiality', 'integrity', 'defining', 'assessing', 'security', 'electronic', 'codebook', 'mode', 'partial', 'aes', 'confidentiality', 'secret', 'data', 'network', 'log', 'encryption', 'authentication', 'establishment', 'digital', 'signature']"
SUTD,50.044,System Security,"This course covers the security of users, individual computer systems, including personal computers, smart cards and embedded platforms. The course starts with considerations of common security flaws in a computer system, security of widely used computer platforms and user authentication. Then, topics such as physical‐layer attacks and tamper resistant hardware are discussed. Finally, the course ends with a set of selected security topics like biometrics, computer forensics, and Bitcoin. Define security objectives for a given computer system based on problem setting and requirements
Explain how computer systems are compromised
Learn how to defend against common attacks to various computer systems
Apply basic security design principles to a secure computer system design and implementation Identify the security objectives of a computer system by defining and assessing the security level of an existing computer system properly and comprehensively, through a design project
Demonstrate ability to apply and analyse common attacks on various computer systems, through successfully compromising a computer system in a laboratory environment
Analyze and apply defensive technology and software to defend various computer systems, by demonstrating security level improvement of existing vulnerable computer systems
Demonstrate mastery of applying system security design principles and best practices by interpreting the process of securing a computer system in a design project","['security', 'security', 'flaw', 'security', 'widely', 'used', 'computer', 'platform', 'user', 'authentication', 'physical', 'layer', 'attack', 'tamper', 'resistant', 'hardware', 'biometrics', 'computer', 'forensics', 'bitcoin', 'define', 'security', 'computer', 'system', 'basic', 'security', 'design', 'principle', 'system', 'design', 'security', 'computer', 'system', 'compromising', 'computer', 'system', 'applying', 'system', 'security', 'design', 'principle', 'process', 'securing', 'computer', 'system']"
SUTD,50.045,Information Retrieval,"Automatic methods of Information Retrieval (IR) have gained greater significance in recent years due to the dramatic increase in the amount of data available on the Web. The data is often present in multiple forms (such as text, image, video) and hence it is necessary that the IR techniques being deployed on the web are able to perform various operations such as search and retrieval across all these different data formats. In this course, the study of IR will be focused on the methodologies of indexing, processing, and querying of primary textual data and will be extended to video and image data in the latter part of the course. The primary learning objective of the course will be – i) to gain knowledge about the basic concepts and techniques of IR.; ii) understand the basic functionality and underlying algorithm of an IR system.; iii) understand modern neural networks and deep learning-based techniques that are used in today’s’ IR systems.; and iv) to learn about several applications of e.g., question answering, image, and video retrieval; v) learn how to develop a basic IR system from scratch and evaluate the system; vi) learn classification, clustering, topic modeling which are the core modules in an IR system. Gain knowledge about the basic concepts and techniques of IR.
Understand the basic functionality and underlying algorithms of an IR system.
Understand modern neural networks and deep learning-based techniques that are used in today’s IR systems.
Learn about several applications of e.g., question answering, image, and video retrieval.
Learn how to develop a basic IR system from scratch and evaluate the system.
Learn clarification, clustering, topic modeling which are the core modules in an IR system. Identifying important concepts of Information Retrieval.
Learn vector space modeling, modern deep learning techniques for IR and evaluation methods. Finally, utilize this knowledge to complete the project.
Evaluate the performance of different IR models using empirical benchmarks.
Implement different IR applications such as Question Answering, Image and Video Retrieval systems.
Able to use libraries such as Sklearn, Keras for data processing and IR model creation.
Mathematically explain common neural network-based models, word2vec and Glove distributed word representations for IR system building.","['automatic', 'method', 'information', 'retrieval', 'ir', 'ir', 'search', 'retrieval', 'ir', 'indexing', 'processing', 'querying', 'primary', 'textual', 'data', 'basic', 'concept', 'technique', 'ir', 'basic', 'functionality', 'underlying', 'algorithm', 'ir', 'system', 'neural', 'network', 'deep', 'learning', 'based', 'ir', 'system', 'develop', 'basic', 'ir', 'system', 'scratch', 'evaluate', 'system', 'classification', 'clustering', 'topic', 'modeling', 'ir', 'system', 'basic', 'concept', 'technique', 'ir', 'understand', 'basic', 'functionality', 'underlying', 'algorithm', 'ir', 'system', 'neural', 'network', 'deep', 'learning', 'based', 'develop', 'basic', 'ir', 'system', 'scratch', 'evaluate', 'system', 'clarification', 'clustering', 'topic', 'modeling', 'ir', 'system', 'learn', 'vector', 'space', 'modeling', 'deep', 'learning', 'ir', 'evaluation', 'method', 'ir', 'model', 'empirical', 'benchmark', 'ir', 'application', 'question', 'answering', 'image', 'video', 'retrieval', 'system', 'kera', 'data', 'processing', 'ir', 'model', 'creation', 'neural', 'network', 'based', 'model', 'word', 'vec', 'glove', 'distributed', 'word', 'representation', 'ir', 'system', 'building']"
SUTD,50.046,Cloud Computing and Internet of Things,"The Internet of Things and its integration with cloud computing are transforming our world in a fundamental way. This course teaches some of the essential IoT and cloud computing technologies from the ground up. Specific topics covered include IoT devices programming (ESP32), sensing technologies, IoT protocols (Zigbee, LPWAN, MQTT), and multiple cloud-based services including storage, distributed and parallel computing, and virtualization. Students will learn how to design, develop, and deploy end-to-end cloud-based IoT applications, by formulating a real-world problem and identifying its key design objectives, challenges, and constraints. To understand the related architecture designs and technologies of cloud computing
To explain the overall architecture and key design principles of IoT systems, including both functional and non-functional aspects
To design cloud-based IoT applications using proper cloud services
To gain hands-on experience in key technologies for developing an IoT system, including sensor selection / interfacing, embedded system programming, use of suitable network protocols, and various cloud services (compute, storage, data analytics, management)
To gain design experience in solving a real-world problem using IoT and cloud technologies
To gain both the experience and confidence in learning a new IoT technology independently List the functions of different IoT and cloud computing components
Use various sensors, embedded device libraries, IoT protocols, and cloud services
Develop skills in systematic testing and debugging
Work in a team to formulate a real-world problem that can be solved using IoT and cloud technologies, including design objectives, challenges, and constraints
Apply suitable IoT and cloud technologies to develop a proof-of-concept system, and present the solution in the class with explanation of its key design considerations
Apply new cloud services or sensors if relevant to the project","['internet', 'thing', 'iot', 'cloud', 'computing', 'technology', 'iot', 'device', 'programming', 'esp', 'sensing', 'technology', 'iot', 'protocol', 'storage', 'distributed', 'parallel', 'computing', 'virtualization', 'design', 'develop', 'deploy', 'end', 'end', 'cloud', 'based', 'iot', 'application', 'architecture', 'design', 'technology', 'cloud', 'computing', 'overall', 'architecture', 'key', 'design', 'principle', 'iot', 'system', 'functional', 'non', 'functional', 'aspect', 'cloud', 'service', 'iot', 'system', 'selection', 'interfacing', 'embedded', 'system', 'programming', 'use', 'suitable', 'network', 'protocol', 'compute', 'data', 'analytics', 'management', 'iot', 'cloud', 'technology', 'confidence', 'learning', 'iot', 'cloud', 'computing', 'component', 'use', 'various', 'sensor', 'embedded', 'device', 'library', 'iot', 'protocol', 'cloud', 'service', 'systematic', 'testing', 'debugging', 'iot', 'cloud', 'technology', 'design', 'objective', 'cloud', 'technology', 'develop', 'proof', 'concept', 'system']"
SUTD,50.049,Parallel Computing on Multicore Architectures,"This course hence aims to equip students with core knowledge of multicore processor architectures and parallel computing, they will:

understand where is the parallelism come from based on the advances in superscalar hyperthreading hardware architectures (multicore CPUs and GPUs);
learn how to architect algorithms, software and solutions that can take full advantage of the latest hardware architectures;
understand the principles of how to design correct and efficient parallel computing software and get familiar with the tools to debug and instrument parallel computing;
get hands-on experience from case studies of algorithms/systems and readings from the current literature provide comparisons and contrasts. Explain the key technologies (e.g., pipeline, out-of-order execution, speculation) used in processor architecture for improving performance.
Learning key concepts in design issues of multi-core processors, such as memory, communication, and scheduling.
Learning how one can develop software that exploits parallelism and concurrency for efficiency, including using software libraries, tools, and formal techniques for design and benchmarking.
Able to develop parallel computing algorithm or system component on modern multicore hardware architectures. Able to understand the fundamental concepts of multicore architectures [Exam].
Implement a working efficient parallel computing algorithm/system components on modern multicore architectures [Projects].
Implement, optimize and test parallel algorithms and data structures [Projects, Exams].","['multicore', 'processor', 'architecture', 'parallel', 'computing', 'superscalar', 'hardware', 'architecture', 'architect', 'algorithm', 'software', 'solution', 'design', 'correct', 'efficient', 'parallel', 'computing', 'software', 'debug', 'instrument', 'parallel', 'computing', 'pipeline', 'order', 'execution', 'speculation', 'processor', 'architecture', 'multi', 'core', 'processor', 'memory', 'communication', 'scheduling', 'parallelism', 'concurrency', 'efficiency', 'software', 'library', 'develop', 'parallel', 'computing', 'algorithm', 'multicore', 'hardware', 'architecture', 'multicore', 'architecture', 'exam', 'modern', 'multicore', 'architecture', 'project', 'optimize', 'test', 'parallel', 'algorithm', 'data', 'structure', 'project', 'exam']"
SUTD,50.05,Discrete Mathematics and Algorithm Design,"An in-depth understanding of Computer Science requires strong mathematical foundations. In this course, students will learn the foundations of discrete mathematics and other mathematical areas, with an emphasis on understanding the underlying mathematics for algorithms beyond those covered in 50.004 Algorithms. Through this course, students will appreciate the wide applicability of mathematics for algorithms in artificial intelligence, communications, computer graphics, cybersecurity, data analytics, robotics, etc. Topics include: Counting methods, logic and proof methods, graph theory (incl. graph colorings, matchings, Ramsey theory), graph algorithms (e.g. Fleury’s algorithm, Kosaraju’s algorithm, Kruskal’s algorithm, Prim’s algorithm), number theory (e.g. modular arithmetic, Euclidean algorithm), coding theory (e.g. Huffman coding, Hamming codes), convex geometry (e.g. polytopes, Voronoi diagrams), computational geometry (e.g. Fortune’s algorithm, Gilbert-Johnson-Keerthi algorithm). At the end of the term, students will be able to:

Understand basic concepts in set theory and logic.
Apply counting methods and proof methods in solving problems.
Demonstrate familiarity with graph-theoretic terminology and concepts.
Analyze structural properties in graphs.
Understand the applications of graph algorithms.
Solve problems using Kruskal’s algorithm and Prim’s algorithm.
Understand Sperner’s lemma and its applications.
Understand basic concepts in elementary number theory.
Apply Huffman coding to data compression.
Understand the geometry of error correction codes.
Demonstrate familiarity with data encoding/decoding using Hamming codes.
Understand basic geometric concepts in convex geometry and computational geometry.
Understand Voronoi diagrams and Fortune’s algorithm.
Understand the Gilbert-Johnson-Keerthi (GJK) algorithm. Solve counting problems via multiple counting methods.
Write mathematical proofs that incorporate various proof methods.
Compute matchings in graphs.
Design simple graph algorithms.
Design algorithms for fair resource division using Sperner’s lemma.
Compute minimal spanning trees using Kruskal’s algorithm and Prim’s algorithm.
Solve congruence equations.
Apply encoding/decoding techniques to data.
Analyze the correctness of algorithms using mathematical concepts.","['computer', 'science', 'discrete', 'mathematics', 'mathematics', 'artificial', 'intelligence', 'communication', 'computer', 'graphic', 'cybersecurity', 'data', 'analytics', 'robotics', 'counting', 'method', 'logic', 'proof', 'method', 'graph', 'theory', 'graph', 'coloring', 'matchings', 'ramsey', 'theory', 'graph', 'algorithm', 'algorithm', 'algorithm', 'kruskal', 'algorithm', 'prim', 'algorithm', 'number', 'theory', 'modular', 'arithmetic', 'euclidean', 'algorithm', 'coding', 'theory', 'huffman', 'coding', 'hamming', 'code', 'convex', 'geometry', 'polytopes', 'voronoi', 'diagram', 'computational', 'geometry', 'fortune', 'algorithm', 'gilbert', 'johnson', 'counting', 'method', 'proof', 'method', 'familiarity', 'graph', 'theoretic', 'terminology', 'concept', 'graph', 'algorithm', 'kruskal', 'algorithm', 'prim', 'algorithm', 'number', 'theory', 'error', 'correction', 'code', 'familiarity', 'data', 'encoding', 'decoding', 'hamming', 'code', 'convex', 'geometry', 'computational', 'geometry', 'voronoi', 'diagram', 'fortune', 'compute', 'matchings', 'simple', 'graph', 'algorithm', 'sperner', 'lemma', 'compute', 'minimal', 'spanning', 'kruskal', 'algorithm', 'prim', 'algorithm', 'encoding', 'decoding', 'analyze', 'correctness', 'algorithm', 'using', 'mathematical', 'concept']"
SUTD,50.051,Programming Language Concepts,"In this module, students will learn about data representation, programming and compilation. In the first part, we will learn how binary is used to encode values (data) and instructions (code). We will then learn how to create complex data types and how object oriented programming works behind the scenes. In the second part, we will work on the different aspects of compilation, including lexical and syntaxic analysis, parsing and programming language design. Students will complete four small projects (2 individual and 2 group assignments) about memory management in C, C++, and compilation (lexical and syntaxic analysis and parsing). By gaining this knowledge, students will be able to understand how programming languages are designed. Program in C and C++
Design a compiler for an imperative programming language
Understand how data/instructions are stored and represented in the computer’s memory
Understand the link between imperative and object-oriented languages
Understand the compilation process Understand how memory is used to store data and instructions on a computer
Ability to program in C and C++
Understand the imperative programming paradigm
Understand the compilation process
Ability to learn any imperative programming language","['data', 'representation', 'programming', 'compilation', 'create', 'complex', 'data', 'type', 'object', 'oriented', 'programming', 'lexical', 'analysis', 'parsing', 'programming', 'language', 'design', 'memory', 'management', 'c', 'compilation', 'c', 'computer', 'memory', 'object', 'oriented', 'language', 'understand', 'compilation', 'c', 'compilation']"
SUTD,50.052,Extended Reality,"Extended Reality (XR) encapsulates various immersive technologies that can merge the physical and virtual worlds, including virtual reality (VR), augmented reality (AR), and mixed reality (MR). This course is an introduction to the fundamental techniques and practical applications of Extended Reality. We will cover several topics: concepts in XR, human perception, immersion and presence, virtual world modelling, real-time simulation, input and output devices, 3D user interaction, design principles for XR, and case studies. These topics will be explored via a combination of lectures, individual assignments and a group project to develop an XR application. Students should be comfortable with programming for the front and back end. They should be familiar with Unity to complete the project and assignments. Define and explain the fundamental concepts in Extended Reality (VR / AR / MR).
Establish and analyse requirements for building an XR system to achieve the goal of immersion and enriched experiences.
Understand the fundamental hardware and software techniques in XR.
Understand the user interaction and interface design principles for XR.
Create and display digital content and design interaction for XR systems.
Develop an XR prototype that addresses an interesting and/or important real problem that involves people.
Analyze the technical feasibility of XR projects and identify the challenges. By the end of this course, students should be able to:

Define and explain principles in design and realization of XR systems.
Explain the advantages, disadvantages, and limitations of using VR, AR, or MR systems.
Model and create virtual worlds for XR.
Design user interface for interacting with the virtual worlds in XR.
Choose suitable input and output devices for building an XR system.
Develop an XR prototype that addresses an interesting and/or important real problem.","['extended', 'reality', 'xr', 'virtual', 'reality', 'augmented', 'reality', 'mixed', 'reality', 'extended', 'reality', 'xr', 'human', 'perception', 'immersion', 'presence', 'virtual', 'world', 'modelling', 'real', 'time', 'simulation', 'input', 'output', 'device', 'user', 'interaction', 'design', 'principle', 'xr', 'develop', 'xr', 'application', 'programming', 'front', 'back', 'end', 'unity', 'extended', 'reality', 'ar', 'mr', 'building', 'xr', 'system', 'achieve', 'goal', 'immersion', 'enriched', 'experience', 'xr', 'xr', 'system', 'develop', 'xr', 'prototype', 'xr', 'project', 'design', 'xr', 'system', 'vr', 'mr', 'system', 'virtual', 'world', 'xr', 'building', 'xr', 'system', 'develop', 'xr', 'prototype']"
SUTD,50.053,Software Testing and Verification,"The course will introduce the fundamental concepts behind various automated testing algorithms and introduce basic concepts behind verification (specifically, model checking). The focus of the
course will be more on the design of test algorithms than the usage of testing tools. At the end of the course, students are expected to gain knowledge on how to test arbitrarily complex systems. The course will provide a brief recap on the testing introduced earlier e.g., coverage-based testing and unit testing. Subsequently, it will dive deep into the systematic test generation strategies. The concluding week of the course will involve discussion of some selected and impactful recent research on software testing and draw an unusual synergy between the model checking (verification) and testing. The course will involve the development of a medium scale software project prototype from scratch (w/o libraries, w/o plugins) and the software prototype will be tested via the systematic testing mechanisms learned in the course. The software prototypes will be exchanged among different groups to mimic the testing culture in industry.
 Design and implement software test generation algorithm from scratch.
Apply key ideas to design directed testing methodologies.
Learning and applying techniques to systematically test the software security.
Learning techniques to apply formal verification techniques on small to medium scale software.
Learning techniques to test software systems without oracles.
Learning techniques to test stateful software systems and ML-based software systems. Build test generation techniques for complex software systems
Prototype software testing algorithms to validate medium scale software systems
Engineer test generation algorithms to direct towards faults and certain code
Build models and properties of software systems for verification
Build test generation algorithms for software systems without ground truth
Build blackbox software testing techniques for validating protocols and data-driven systems
Engineer software testing techniques to check regression errors","['model', 'checking', 'test', 'arbitrarily', 'complex', 'system', 'coverage', 'based', 'testing', 'unit', 'testing', 'systematic', 'test', 'generation', 'strategy', 'software', 'project', 'prototype', 'systematic', 'testing', 'mechanism', 'design', 'implement', 'software', 'test', 'generation', 'software', 'security', 'software', 'test', 'software', 'system', 'test', 'stateful', 'software', 'system', 'ml', 'based', 'software', 'system', 'build', 'test', 'generation', 'software', 'system', 'engineer', 'test', 'generation', 'algorithm', 'blackbox', 'software', 'testing', 'data', 'driven', 'system', 'engineer', 'software', 'testing', 'check', 'regression', 'error']"
SIT,CSC1002,Mathematics 1,"This first mathematics module will equip students with the core mathematical knowledge in discrete mathematics. The module consists of a series of lectures and tutorials. Basic logic, functions, relations and sets, sequences and series, prime number and divisibility, mathematical induction, pigeonhole principle, and permutation and combinations.","['mathematics', 'discrete', 'mathematics', 'function', 'sequence', 'series', 'prime', 'number', 'divisibility', 'mathematical', 'induction', 'pigeonhole', 'principle', 'permutation', 'combination']"
SIT,CSC1001,Introduction to Computer Systems,"This module is intended to be at an introductory level to provide an overview of the different modules taught in the computing science programme. The purpose is to enable students to appreciate the relevance and interrelationships of different modules without being lost in the details, as well as to instill a computing science mindset in them.  This module covers wide variety of topics ranging from binary number systems, the building blocks of hardware, the building blocks of software, to algorithms, database and security.","['number', 'system', 'algorithm', 'database', 'security']"
SIT,ICT1002,Programming Fundamentals,"The foundations provided in this module are essential in most modules of the following terms in the ICT programmes.  The topics covered in this module include Introduction to the historical and social context of computing, Basic concepts in programming (Data types, Control structures, Functions, Arrays, pointers, Files), Running, Testing and Debugging scripts and programs, Overview of Programming paradigms. Programming concepts are demonstrated in a variety of languages and practised in a scripting language (Python) as well as a standard programming language (C).","['ict', 'programming', 'control', 'structure', 'function', 'array', 'running', 'testing', 'debugging', 'programming', 'paradigm', 'programming', 'python']"
SIT,CSC1006,Mathematics 2,"This second mathematics module will equip students with the core mathematical knowledge in statistics and linear algebra which will be required in the specialized topic in machine learning and data analytics in year 2 and year 3. Topics covered include descriptive statistics, probability theory, probability distributions, sampling distributions, inferential statistics, matrix operations and solving systems of linear equations.","['mathematics', 'statistic', 'linear', 'algebra', 'machine', 'learning', 'data', 'analytics', 'statistic', 'probability', 'theory', 'probability', 'distribution', 'sampling', 'distribution', 'inferential', 'statistic', 'matrix', 'operation', 'solving', 'system', 'linear', 'equation']"
SIT,CSC3009,Machine Learning,"This module presents students with an introduction to the general theory of learning from data and to a number of popular Machine Learning methods. It also enables the students to use a selection of common machine learning algorithms for IoT applications and be aware of when one is to be favoured over the other.  The main machine learning methods: regression, classification, clustering, probability density estimation, deep learning and dimensionality reduction will be covered in this module. Students will be exposed to data exploration methods in R or Python.","['machine', 'learning', 'machine', 'learning', 'algorithm', 'iot', 'application', 'machine', 'learning', 'regression', 'classification', 'clustering', 'probability', 'density', 'estimation', 'deep', 'learning', 'dimensionality', 'reduction', 'data', 'exploration', 'r', 'python']"
SIT,ICT1008,Data Structures and Algorithms,"This module introduces the fundamental concepts of data structures and the complexity analysis of algorithms that operate on them. Topics include recursion, fundamental data structures (including arrays, linked lists, stacks, queues, hash tables, trees, heaps and graphs), and efficient algorithms for manipulation and searching of data in these data structures (e.g. sorting, hashing, searching, etc.).The inner workings of the different data structures and algorithms introduced in this course are demonstrated using a programming language such as Java.","['data', 'structure', 'complexity', 'analysis', 'algorithm', 'recursion', 'data', 'structure', 'array', 'linked', 'list', 'stack', 'tree', 'data', 'structure', 'searching', 'inner', 'working', 'data', 'structure', 'algorithm', 'introduced', 'programming', 'language', 'java']"
SIT,ICT1004,Web Systems and Technologies,"IT applications are increasingly web-based. This module covers the essential web technologies to equip students with the useful skills to build websites for web-based IT applications. To begin, an overview of the web architecture will be presented to clarify the myriad and rapidly evolving web technologies. Next, the popular web technologies will be covered in details.  Topics include HTML, CSS, JavaScript for client-side scripting, PHP for server-side scripting, MySQL database system and industry best practices to secure the websites.","['application', 'build', 'website', 'web', 'based', 'application', 'web', 'architecture', 'html', 'cs', 'php', 'server', 'side', 'scripting', 'mysql', 'database', 'system']"
SIT,CSC1009,Object-Oriented Programming,"The aim of this introductory module is to enable students to learn the basic language constructs and APIs of Java and apply them to construct practical software components. Students will also be taught the handling of exceptions (not just to catch and ignore them) in order to develop secured code. Upon completion of this course, students will be able to apply what they have learnt to implement object-oriented software applications. They will also have an understanding of the benefits of code documentation and reusability. The module gives coverage of fundamental algorithmic constructs in Java that realize logical, arithmetical, execution flow control and data manipulation behaviours in code. Essential APIs and code specification will be covered to encourage reusability for more efficient, scalable programming. Students will also be introduced via hands-on assignments to the application of basic object-oriented concepts that include class, inheritance and polymorphism. Basic testing using JUnit will be covered.","['basic', 'language', 'construct', 'apis', 'java', 'construct', 'practical', 'software', 'component', 'handling', 'exception', 'develop', 'secured', 'code', 'implement', 'object', 'oriented', 'software', 'application', 'code', 'documentation', 'reusability', 'fundamental', 'algorithmic', 'construct', 'java', 'arithmetical', 'execution', 'flow', 'control', 'essential', 'apis', 'scalable', 'programming', 'object', 'oriented', 'concept', 'inheritance', 'polymorphism']"
SIT,DCM1112,Data Engineering and Visualization,"This module covers the fundamentals of visualising quantitative data. Whilst data collection is becoming increasingly sophisticated, the ability to successfully translate that data into something usable and consumable remains elusive. Students will work with a wide variety of data – consumer, social, financial, medical and scientific. Students will also be exposed to the social and cultural circumstances surrounding such data. Fundamentals of cisualising quantitative data. ","['visualising', 'quantitative', 'data', 'data', 'collection', 'quantitative', 'data']"
SIT,PHE2019,Ethics and Professional Conducts,This module covers the ethics of engineering in society. Students will be doing case studies with oral presentation and written report. Engineers in society; Roles and responsibilities of professional engineers; Fundamentals of moral and ethical values; Codes of professional conduct and ethics with cases; Corruption in engineering projects; Framework for ethical decision; Process safety,"['oral', 'presentation', 'written', 'report', 'moral', 'ethical', 'value', 'ethical', 'decision', 'process', 'safety']"
SIT,ICT2101,Introduction to Software Engineering,"The aim of this introductory module is to enable students to learn and apply the basic principles and processes of software engineering. It gives broad coverage of important terminologies, concepts and techniques in software engineering including commonly used software life-cycle process models. Upon completion of this course, students will be able to perform basic requirements engineering and design, and be able to adopt appropriate process models for software development projects. They will also have a basic understanding of requirements engineering, software architecture, testing, software maintenance and project planning. Active learning lectures will be reinforced by flipped tutorials and project-driven labs. For tutorials, students will work in teams to solve pre-assigned problems before the class sessions, and thereby present and defend their solutions during the sessions. In the labs, students will work in teams on client-based projects and utilize a suitable software development life cycle to realize the software products. Besides learning to apply module knowledge during their tutorials and in their development project, students will have the opportunity to learn to make decisions, work, cooperate and communicate with others in a team. As part of the module assessment, each team will develop the client-specified product along with associated deliverables, conduct a software product demonstration as well as undergo individual performance evaluation and peer group evaluation. agile, waterfall, spiral, V-Model, UML","['basic', 'principle', 'process', 'software', 'engineering', 'software', 'engineering', 'software', 'life', 'cycle', 'process', 'model', 'software', 'architecture', 'software', 'maintenance', 'project', 'planning', 'make', 'decision', 'cooperate', 'communicate', 'others', 'spiral', 'model', 'uml']"
SIT,CSC2003,Embedded Systems Programming,"This module aims to develop knowledge and practical expertise in embedded systems and learn about their basic architectural components, applications and corresponding design constraints, as well as understand different sensors for IoT applications. Based on a specific microcontroller and a set of real-world applications and examples, students will learn the functionality of microcontrollers and their integration within an embedded system. Students will also get an opportunity to explore a variety of different sensors and platforms, and enhance their understanding of programming in a low-level language such as C. In lab practicals, students apply theoretical knowledge with exercises using a development platform and measurement equipment, and then progress to an industry relevant team project, giving them the opportunity to plan and organize a larger task, and make and justify their design and implementation decisions. Topics include (but is not limited to) memory maps, GPIOs, interrupts, ADC/DAC, timers, serial/parallel communication and power management, C","['embedded', 'system', 'basic', 'architectural', 'component', 'application', 'corresponding', 'design', 'constraint', 'iot', 'application', 'functionality', 'microcontrollers', 'c', 'plan', 'organize', 'design', 'implementation', 'decision', 'memory', 'map', 'adc', 'dac', 'timer', 'serial', 'parallel', 'communication', 'power', 'management']"
SIT,CSC2008,Database Systems,"This module aims to develop the software engineering and database administration skills required for designing, creating, running and developing a relational database application and its associated application software suite. Understanding of the fundamental concepts, theories and methods of the relational data model, physical file systems, optimization and indexing, Basic concepts in relational databases, Time-series and spatially organised databases, spatio-temporal relationships and join operations.","['software', 'engineering', 'database', 'administration', 'relational', 'database', 'relational', 'data', 'model', 'physical', 'file', 'system', 'optimization', 'indexing', 'basic', 'concept', 'relational', 'database', 'time', 'series', 'spatio', 'temporal', 'relationship', 'join', 'operation']"
SIT,CSC3004,Cloud Computing and Big Data,"This module focuses on the software engineering issues raised by distributed systems and algorithms for use in IoT and pervasive systems. It aims to enable students to develop mechanisms, methodologies and applications for distributed IoT systems, distributed data processing algorithms, distributed algorithms for information dissemination along with theoretical/mathematical modelling of distributed computing, which allow such applications to be developed and deployed for the Smart Nation initiatives. This module also covers cloud computing that includes the concept of software defined architectures, virtualisations and containers. Docker, Kubernates in cloud infrastructure as well as how cloud service providers organise their offerings including platform as a service (PaaS), mobile backend as a service and even serverless architectures. Cloud and distributed computing for IoT and Pervasive Systems","['software', 'engineering', 'distributed', 'system', 'iot', 'pervasive', 'system', 'develop', 'mechanism', 'methodology', 'application', 'distributed', 'iot', 'system', 'distributed', 'data', 'processing', 'algorithm', 'distributed', 'algorithm', 'theoretical', 'mathematical', 'modelling', 'distributed', 'computing', 'cloud', 'computing', 'software', 'defined', 'architecture', 'container', 'cloud', 'mobile', 'backend', 'service', 'even', 'architecture', 'distributed', 'computing', 'iot', 'pervasive', 'system']"
SIT,ICT4005,Change Management,"The students will be introduced to a number of change management theories and apply the theories at different levels. As this module is going to be carried out concurrently with the student’s placement, the student would also be able to analyse and reflect how changes took place at the hosting organizational as well as at the individual level. The student should also be able to develop, after taking this module, individualised strategies when dealing with change in the future. This course aims to teach the students about the concepts of change management, drawing to three levels namely societal, organizational and individual.","['change', 'management', 'theory', 'change', 'management', 'organizational', 'individual']"
SIT,ICT3211,Integrative Team Project,"Students will be grouped into teams of 5-6 and will be working on an integrated team project utilising all the foundation knowledge and skills obtained from the modules that they have covered so far. The students will work to provide a solution for a real problem that will be solicited from industry (e.g. prototyping for a SME). This project will enable students to develop the required skills for working as a team. As this project will run through the entire duration of the semester, some students may be taking their breaks or holidays. Thus, this creates an opportunity for the teams to make use of online collaboration tools as well as practice coordination of team projects where members have heterogeneous abilities and schedules Project based, ""skills obtained so far"", might need to use prototyping",[]
SIT,ICT3210/ICT3110,Industry Certification Module,"To keep up-to-date with the advances in technology, it is common for ICT professionals to attend courses during their careers. Some of these courses may also lead to internationally recognised certifications that are highly-valued by the industry. To inculcate the student with this approach to life-long learning and career advancement, this module requires the student to pass at least one of the certification courses offered by various industry majors or certification bodies. The list of certification courses accepted will be updated regularly to cover the areas that are in demand by the industry.  Areas may include data analytics, cloud solutions architectures, open-source software development and cyber-security.","['ict', 'data', 'analytics', 'cloud', 'solution', 'architecture', 'open', 'source', 'software', 'development', 'cyber', 'security']"
SIT,CSC3002,Integrated Work Study Programme,"Students will undertake an eight-month Integrated Work Study Programme (IWSP) with a company. You will learn to integrate theories through practice, acquire industry knowledge and develop professional skills in a real-world environment. IWSP provides an opportunity for students to immerse themselves in the placement company’s business and culture. The practical experience will allow students to smoothly transit into a career upon graduation. Internship",[]
SIT,ICT4001,Capstone Project,"This is a major individual project that is to be undertaken by the student that utilises the technical capabilities, professional skills and the academic knowledge obtained during the course of this degree programme. The project has to be of reasonable complexity and allows scope for the student to demonstrate the various aspects of software engineering. As the capstone project will be carried out concurrently with the student’s placements, hosting organisations may also propose capstone projects which may lead to actual industrial usage. Capstone Project",[]
SIT,CSC3005,Data Analytics ,"This module will endow students with the understanding of the new challenges big data introduces, in particular in the area of IoT and the currently available solutions. These include (i) challenges pertaining to the modelling, accessing, and storing of big data, (ii) an understanding of the fundamentals of systems designed to store and access big data, (iii) programming paradigms for efficient scalable access to big data, and (iv) data processing methodology to facilitate big data analytics. The module will have a particular emphasis on the impact of the desiderata of scalability and efficiency in big data infrastructures, and expose students with a number of different cloud-based NoSQL systems and their design and implementation details, showing how they can achieve efficiency and scalability.  Topics to be covered include Google FS, HDFS, Map-Reduce/Spark Programming paradigm (including an overview of computational statistics and machine learning in the Hadoop/Spark universe), Distributed NoSQL data store (BigTable/HBase), Cassandra and Hive.","['big', 'data', 'iot', 'modelling', 'accessing', 'storing', 'big', 'data', 'fundamental', 'system', 'designed', 'store', 'access', 'big', 'data', 'programming', 'paradigm', 'efficient', 'scalable', 'access', 'big', 'data', 'data', 'processing', 'methodology', 'facilitate', 'big', 'data', 'analytics', 'scalability', 'efficiency', 'big', 'data', 'infrastructure', 'cloud', 'based', 'nosql', 'system', 'achieve', 'efficiency', 'scalability', 'google', 'f', 'hdfs', 'map', 'reduce', 'spark', 'programming', 'computational', 'statistic', 'machine', 'learning', 'distributed', 'nosql', 'data', 'store', 'cassandra', 'hive']"
SIT,Artificial Intelligence in Business and Society,Artificial Intelligence in Business and Society,Artificial Intelligence in Business and Society,"['artificial', 'intelligence', 'business']"
SIT,Natural Language Processing,Natural Language Processing,Natural Language Processing,"['natural', 'language', 'processing']"
SIT,Edge Computing and Analytics,Edge Computing and Analytics,Edge Computing and Analytics,"['edge', 'computing', 'analytics']"
SIT,Cyber Security Fundamentals,Cyber Security Fundamentals,Cyber Security Fundamentals,[]
SIT,AI Cross-Domain Project,AI Cross-Domain Project,AI Cross-Domain Project,"['cross', 'domain', 'project']"
SIT,Computer Vision and Deep Learning,Computer Vision and Deep Learning,Computer Vision and Deep Learning,"['computer', 'vision', 'deep', 'learning']"
